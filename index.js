// Generated by purs bundle 0.14.1
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value));
      };
  }; 
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var OrdRecord = function (EqRecord0, compareRecord) {
      this.EqRecord0 = EqRecord0;
      this.compareRecord = compareRecord;
  };
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordRecordNil = new OrdRecord(function () {
      return Data_Eq.eqRowNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return Data_Ordering.EQ.value;
          };
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));   
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return new Ord(function () {
              return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
          }, compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $49 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($49) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  }; 
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return new OrdRecord(function () {
                      return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                              var $55 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                              if ($55) {
                                  return left;
                              };
                              return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                          };
                      };
                  });
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $59 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($59) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["max"] = max;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordArray"] = ordArray;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["BoundedEnum"] = BoundedEnum;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["unlessM"] = unlessM;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });      
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["monoidString"] = monoidString;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $321 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $322 = Data_Eq.eq(dictEq);
          return function ($323) {
              return $321($322($323));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Functor = $PS["Data.Functor"];          
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  }; 
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["functorTuple"] = functorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ratio"] = $PS["Data.Ratio"] || {};
  var exports = $PS["Data.Ratio"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];        
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var eqRatio = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq(dictEq)(v.value1)(v1.value1);
          };
      });
  };
  exports["reduce"] = reduce;
  exports["eqRatio"] = eqRatio;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["split"] = $foreign.split;
  exports["toUpper"] = $foreign.toUpper;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];              
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  }; 
  var bifunctorEither = new Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v(v2.value0));
              };
              if (v2 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify'"] = modify$prime;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($58) {
          return go(f($58));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v = Effect_Ref.read(r)();
                      if (v instanceof Loop) {
                          var e = f(v.value0)();
                          Effect_Ref.write(e)(r)();
                          return false;
                      };
                      if (v instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEffect"] = monadRecEffect;
  exports["monadRecEither"] = monadRecEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.StringParser"] = $PS["Text.Parsing.StringParser"] || {};
  var exports = $PS["Text.Parsing.StringParser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v2) {
              return {
                  pos: v1.pos,
                  error: v2.error
              };
          })(v(v1));
      };
  };
  var runParser = function (v) {
      return function (s) {
          return Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  }; 
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          var $61 = Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return {
                  result: f(v1.result),
                  suffix: v1.suffix
              };
          });
          return function ($62) {
              return $61(v($62));
          };
      };
  });
  var fail = function (error) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: error
          });
      };
  };
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result),
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a,
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0,
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0,
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser (line 90, column 7 - line 90, column 70): " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a,
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error,
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadRecParser"] = monadRecParser;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._codePointAt = function (fallback) {
    return function (Just) {
      return function (Nothing) {
        return function (unsafeCodePointAt0) {
          return function (index) {
            return function (str) {
              var length = str.length;
              if (index < 0 || index >= length) return Nothing;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index;; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing;
                  if (i === 0) return Just(unsafeCodePointAt0(o.value));
                }
              }
              return fallback(index)(str);
            };
          };
        };
      };
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };

  exports.all = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (!p(xs[i])) return false;
      }
      return true;
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                                                    
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var singleton = function (a) {
      return [ a ];
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var find = function (f) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["last"] = last;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["findIndex"] = findIndex;
  exports["concatMap"] = concatMap;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["deleteBy"] = deleteBy;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["filter"] = $foreign.filter;
  exports["any"] = $foreign.any;
  exports["all"] = $foreign.all;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var hexadecimal = 16;
  exports["hexadecimal"] = hexadecimal;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS);
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var showCodePoint = new Data_Show.Show(function (v) {
      return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
  });
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var codePointAtFallback = function ($copy_n) {
      return function ($copy_s) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, s) {
              var v = uncons(s);
              if (v instanceof Data_Maybe.Just) {
                  var $44 = n === 0;
                  if ($44) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head);
                  };
                  $tco_var_n = n - 1 | 0;
                  $copy_s = v.value0.tail;
                  return;
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_s);
          };
          return $tco_result;
      };
  };
  var codePointAt = function (v) {
      return function (v1) {
          if (v < 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0 && v1 === "") {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0) {
              return new Data_Maybe.Just(unsafeCodePointAt0(v1));
          };
          return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
  };
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["codePointAt"] = codePointAt;
  exports["showCodePoint"] = showCodePoint;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Unit = $PS["Data.Unit"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                          return new Data_List_Types.Cons(v, acc);
                      })(function (v) {
                          return reverse(acc);
                      })(aa));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.StringParser.Combinators"] = $PS["Text.Parsing.StringParser.Combinators"] || {};
  var exports = $PS["Text.Parsing.StringParser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];                
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var cons$prime = function (h) {
      return function (t) {
          return new Data_NonEmpty.NonEmpty(h, t);
      };
  };
  var many1 = function (p) {
      return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(cons$prime)(p))(many(p));
  };
  exports["many1"] = many1;
  exports["withError"] = withError;
  exports["option"] = option;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.StringParser.CodePoints"] = $PS["Text.Parsing.StringParser.CodePoints"] || {};
  var exports = $PS["Text.Parsing.StringParser.CodePoints"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];
  var anyChar = (function () {
      var toChar = (function () {
          var $38 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
          return function ($39) {
              return Data_Char.fromCharCode($38($39));
          };
      })();
      return function (v) {
          var v1 = Data_String_CodePoints.codePointAt(v.pos)(v.str);
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = toChar(v1.value0);
              if (v2 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v2.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + 1 | 0
                      }
                  });
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Left({
                      pos: v.pos,
                      error: "CodePoint " + (Data_Show.show(Data_String_CodePoints.showCodePoint)(v1.value0) + " is not a character")
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 53, column 16 - line 55, column 87): " + [ v2.constructor.name ]);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return new Data_Either.Left({
                  pos: v.pos,
                  error: "Unexpected EOF"
              });
          };
          throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 52, column 3 - line 56, column 53): " + [ v1.constructor.name ]);
      };
  })();
  var anyDigit = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
      var $34 = c >= "0" && c <= "9";
      if ($34) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
      };
      return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " is not a digit"));
  }));
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
          var $36 = f(c);
          if ($36) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " did not satisfy predicate"));
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };
  var oneOf = function (dictFoldable) {
      var $42 = Data_Function.flip(Data_Foldable.elem(dictFoldable)(Data_Eq.eqChar));
      return function ($43) {
          return satisfy($42($43));
      };
  };
  exports["anyDigit"] = anyDigit;
  exports["char"] = $$char;
  exports["oneOf"] = oneOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Common"] = $PS["Common"] || {};
  var exports = $PS["Common"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodePoints = $PS["Text.Parsing.StringParser.CodePoints"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var ascii0 = Data_Char.toCharCode("0");
  var digit = function (d) {
      return Data_Char.toCharCode(d) - ascii0 | 0;
  };
  var $$parseInt = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.option("+")(Text_Parsing_StringParser_CodePoints["char"]("-")))(function (signChar) {
      var sign = (function () {
          var $2 = signChar === "-";
          if ($2) {
              return -1 | 0;
          };
          return 1;
      })();
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_CodePoints.anyDigit))(function (dgts) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(sign * Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(function (acc) {
              return function (d) {
                  return (10 * acc | 0) + digit(d) | 0;
              };
          })(0)(dgts) | 0);
      });
  });
  var parseFrac = Control_Bind.bind(Text_Parsing_StringParser.bindParser)($$parseInt)(function (num) {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.option(1)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints["char"]("/"))(function () {
          return $$parseInt;
      })))(function (denom) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(num)(denom));
      });
  });
  var parseMBS = function (str) {
      var v = function (v1) {
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Common (line 41, column 1 - line 41, column 32): " + [ str.constructor.name ]);
      };
      var $5 = Data_String_Common.split(",")(str);
      if ($5.length === 3) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.hush(Text_Parsing_StringParser.runParser($$parseInt)($5[0])))(function (m) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.hush(Text_Parsing_StringParser.runParser($$parseInt)($5[1])))(function (b) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.hush(Text_Parsing_StringParser.runParser(parseFrac)($5[2])))(function (s) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          m: m,
                          b: b,
                          s: s
                      });
                  });
              });
          });
      };
      return v(true);
  };
  exports["parseMBS"] = parseMBS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Group"] = $PS["Data.Group"] || {};
  var exports = $PS["Data.Group"];                 
  var Group = function (Monoid0, ginverse) {
      this.Monoid0 = Monoid0;
      this.ginverse = ginverse;
  };
  var ginverse = function (dict) {
      return dict.ginverse;
  };
  exports["ginverse"] = ginverse;
  exports["Group"] = Group;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Pitches.Class"] = $PS["Data.Pitches.Class"] || {};
  var exports = $PS["Data.Pitches.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Group = $PS["Data.Group"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var ShowPitch = function (showPitch) {
      this.showPitch = showPitch;
  };
  var Pitch = function (x) {
      return x;
  };
  var ParsePitchNotation = function (parsePitchNotation) {
      this.parsePitchNotation = parsePitchNotation;
  };
  var ParseNotation = function (parseNotation) {
      this.parseNotation = parseNotation;
  };
  var Interval = function (Group0, direction, iabs, octave) {
      this.Group0 = Group0;
      this.direction = direction;
      this.iabs = iabs;
      this.octave = octave;
  };
  var HasIntervalClass = function (Interval0, Interval1, ic) {
      this.Interval0 = Interval0;
      this.Interval1 = Interval1;
      this.ic = ic;
  };
  var Diatonic = function (Interval0, isStep) {
      this.Interval0 = Interval0;
      this.isStep = isStep;
  };
  var showPitch = function (dict) {
      return dict.showPitch;
  };
  var showPitchInst = function (dictShowPitch) {
      return new Data_Show.Show(function (v) {
          return showPitch(dictShowPitch)(v);
      });
  };
  var parsePitchNotation = function (dict) {
      return dict.parsePitchNotation;
  };
  var parsenotationPitch = function (dictParsePitchNotation) {
      return new ParseNotation(parsePitchNotation(dictParsePitchNotation));
  };
  var parseNotation = function (dict) {
      return dict.parseNotation;
  };
  var ordPitch = function (dictOrd) {
      return dictOrd;
  };
  var isStep = function (dict) {
      return dict.isStep;
  };
  var ic = function (dict) {
      return dict.ic;
  };
  var iabs = function (dict) {
      return dict.iabs;
  }; 
  var functorPitch = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var pc = function (dictHasIntervalClass) {
      return Data_Functor.map(functorPitch)(ic(dictHasIntervalClass));
  };
  var eqPitch = function (dictEq) {
      return dictEq;
  };
  var down = function (dictInterval) {
      return Data_Group.ginverse(dictInterval.Group0());
  };
  var pto = function (dictInterval) {
      return function (v) {
          return function (v1) {
              return Data_Semigroup.append(((dictInterval.Group0()).Monoid0()).Semigroup0())(v1)(down(dictInterval)(v));
          };
      };
  };
  var direction = function (dict) {
      return dict.direction;
  };
  exports["Interval"] = Interval;
  exports["direction"] = direction;
  exports["iabs"] = iabs;
  exports["down"] = down;
  exports["HasIntervalClass"] = HasIntervalClass;
  exports["ic"] = ic;
  exports["pc"] = pc;
  exports["Diatonic"] = Diatonic;
  exports["isStep"] = isStep;
  exports["parseNotation"] = parseNotation;
  exports["Pitch"] = Pitch;
  exports["pto"] = pto;
  exports["ShowPitch"] = ShowPitch;
  exports["ParsePitchNotation"] = ParsePitchNotation;
  exports["eqPitch"] = eqPitch;
  exports["ordPitch"] = ordPitch;
  exports["showPitchInst"] = showPitchInst;
  exports["parsenotationPitch"] = parsenotationPitch;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var length = function (v) {
      return 1 + Data_List.length(v.value1) | 0;
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons"] = cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Pitches.Internal"] = $PS["Data.Pitches.Internal"] || {};
  var exports = $PS["Data.Pitches.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Char = $PS["Data.Char"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodePoints = $PS["Text.Parsing.StringParser.CodePoints"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var ascii0 = Data_Char.toCharCode("0");
  var digit = function (d) {
      return Data_Char.toCharCode(d) - ascii0 | 0;
  };
  var $$parseInt = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.option("+")(Text_Parsing_StringParser_CodePoints["char"]("-")))(function (signChar) {
      var sign = (function () {
          var $0 = signChar === "-";
          if ($0) {
              return -1 | 0;
          };
          return 1;
      })();
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_CodePoints.anyDigit))(function (dgts) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(sign * Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(function (acc) {
              return function (d) {
                  return (10 * acc | 0) + digit(d) | 0;
              };
          })(0)(dgts) | 0);
      });
  });
  exports["parseInt"] = $$parseInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Pitches.Spelled"] = $PS["Data.Pitches.Spelled"] || {};
  var exports = $PS["Data.Pitches.Spelled"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Group = $PS["Data.Group"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Pitches_Class = $PS["Data.Pitches.Class"];
  var Data_Pitches_Internal = $PS["Data.Pitches.Internal"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodePoints = $PS["Text.Parsing.StringParser.CodePoints"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var Spelled = function (alteration, degree, diasteps, fifths, generic, internalOctaves, octaves) {
      this.alteration = alteration;
      this.degree = degree;
      this.diasteps = diasteps;
      this.fifths = fifths;
      this.generic = generic;
      this.internalOctaves = internalOctaves;
      this.octaves = octaves;
  };
  var SIC = function (x) {
      return x;
  }; 
  var spelled = function (fifths1) {
      return function (octaves1) {
          return {
              fifths: fifths1,
              octaves: octaves1
          };
      };
  };
  var spelledp = function (fs) {
      return function (os) {
          return Data_Pitches_Class.Pitch(spelled(fs)(os));
      };
  };                                 
  var sic = SIC;
  var semigroupSInterval = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return spelled(v.fifths + v1.fifths | 0)(v.octaves + v1.octaves | 0);
      };
  });
  var semigroupSIC = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return sic(v + v1 | 0);
      };
  });
  var parseAccs = (function () {
      var munch = function ($127) {
          return Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_CodePoints["char"]($127));
      };
      var sharps = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.length)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(munch("\u266f"))(munch("#")));
      var flats = Data_Functor.map(Text_Parsing_StringParser.functorParser)((function () {
          var $128 = Data_Ring.negate(Data_Ring.ringInt);
          return function ($129) {
              return $128(Data_List_NonEmpty.length($129));
          };
      })())(Control_Alt.alt(Text_Parsing_StringParser.altParser)(munch("\u266d"))(munch("b")));
      return Text_Parsing_StringParser_Combinators.option(0)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(sharps)(flats));
  })();
  var octaves = function (dict) {
      return dict.octaves;
  };          
  var monoidSInterval = new Data_Monoid.Monoid(function () {
      return semigroupSInterval;
  }, spelled(0)(0));
  var monoidSIC = new Data_Monoid.Monoid(function () {
      return semigroupSIC;
  }, sic(0));
  var internalOctaves = function (dict) {
      return dict.internalOctaves;
  };
  var groupSInterval = new Data_Group.Group(function () {
      return monoidSInterval;
  }, function (v) {
      return spelled(-v.fifths | 0)(-v.octaves | 0);
  });
  var groupSIC = new Data_Group.Group(function () {
      return monoidSIC;
  }, function (v) {
      return sic(-v | 0);
  });
  var generic = function (dict) {
      return dict.generic;
  };               
  var fifths2degree = function (fifths1) {
      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(fifths1 * 4 | 0)(7);
  };
  var spelledSIC = new Spelled(function (v) {
      return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v + 1 | 0)(7);
  }, function (v) {
      return fifths2degree(v);
  }, function (v) {
      return fifths2degree(v);
  }, function (v) {
      return v;
  }, function (v) {
      return fifths2degree(v);
  }, function (v) {
      return 0;
  }, function (v) {
      return 0;
  });
  var fifths = function (dict) {
      return dict.fifths;
  };                        
  var eqSInterval = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x.fifths === y.fifths && x.octaves === y.octaves;
      };
  });
  var eqSIC = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var diasteps = function (dict) {
      return dict.diasteps;
  };
  var intervalSIC = new Data_Pitches_Class.Interval(function () {
      return groupSIC;
  }, function (i) {
      var dia = diasteps(spelledSIC)(i);
      var $89 = dia === 0;
      if ($89) {
          return Data_Ordering.EQ.value;
      };
      var $90 = dia < 4;
      if ($90) {
          return Data_Ordering.GT.value;
      };
      return Data_Ordering.LT.value;
  }, function (i) {
      if (Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Pitches_Class.direction(intervalSIC)(i))(Data_Ordering.LT.value)) {
          return Data_Pitches_Class.down(intervalSIC)(i);
      };
      if (Data_Boolean.otherwise) {
          return i;
      };
      throw new Error("Failed pattern match at Data.Pitches.Spelled (line 288, column 1 - line 295, column 20): " + [ i.constructor.name ]);
  }, sic(0));
  var degree = function (dict) {
      return dict.degree;
  };
  var diatonicSIC = new Data_Pitches_Class.Diatonic(function () {
      return intervalSIC;
  }, function (i) {
      var deg = degree(spelledSIC)(i);
      return deg === 0 || (deg === 1 || deg === 6);
  });
  var spelledSInterval = new Spelled(function (i) {
      return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(fifths(spelledSInterval)(Data_Pitches_Class.iabs(intervalSInterval)(i)) + 1 | 0)(7);
  }, function (v) {
      return fifths2degree(v.fifths);
  }, function (v) {
      return (v.fifths * 4 | 0) + (v.octaves * 7 | 0) | 0;
  }, function (v) {
      return v.fifths;
  }, function (i) {
      if (Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Pitches_Class.direction(intervalSInterval)(i))(Data_Ordering.LT.value)) {
          return -degree(spelledSInterval)(Data_Pitches_Class.down(intervalSInterval)(i)) | 0;
      };
      if (Data_Boolean.otherwise) {
          return degree(spelledSInterval)(i);
      };
      throw new Error("Failed pattern match at Data.Pitches.Spelled (line 169, column 1 - line 178, column 47): " + [ i.constructor.name ]);
  }, function (v) {
      return v.octaves;
  }, function (v) {
      return v.octaves + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v.fifths * 4 | 0)(7) | 0;
  });
  var intervalSInterval = new Data_Pitches_Class.Interval(function () {
      return groupSInterval;
  }, function (i) {
      return Data_Ord.compare(Data_Ord.ordInt)(diasteps(spelledSInterval)(i))(0);
  }, function (i) {
      if (Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Pitches_Class.direction(intervalSInterval)(i))(Data_Ordering.LT.value)) {
          return Data_Pitches_Class.down(intervalSInterval)(i);
      };
      if (Data_Boolean.otherwise) {
          return i;
      };
      throw new Error("Failed pattern match at Data.Pitches.Spelled (line 192, column 1 - line 197, column 20): " + [ i.constructor.name ]);
  }, spelled(0)(1));
  var hasintervalclassSInterval = new Data_Pitches_Class.HasIntervalClass(function () {
      return intervalSInterval;
  }, function () {
      return intervalSIC;
  }, function (v) {
      return sic(v.fifths);
  });                          
  var asciiA = Data_Char.toCharCode("A");
  var letter = function (dictSpelled) {
      return function (i) {
          return Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar(Data_Maybe.fromMaybe("X")(Data_Char.fromCharCode(asciiA + Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(degree(dictSpelled)(i) + 2 | 0)(7) | 0))));
      };
  };
  var parseName = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.oneOf(Data_Foldable.foldableArray)([ "A", "B", "C", "D", "E", "F", "G" ]))(function (name) {
      var dia = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)((Data_Char.toCharCode(name) - asciiA | 0) - 2 | 0)(7);
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseAccs)(function (acc) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)((Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)((dia * 2 | 0) + 1 | 0)(7) - 1 | 0) + (7 * acc | 0) | 0);
      });
  });
  var parsenotationSPitch = new Data_Pitches_Class.ParsePitchNotation(function (str) {
      var parser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseName)(function (fs) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Data_Pitches_Internal["parseInt"])(function (os) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(spelledp(fs)(os - Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(fs * 4 | 0)(7) | 0));
          });
      });
      return Data_Either.hush(Text_Parsing_StringParser.runParser(parser)(str));
  });                                                                        
  var alteration = function (dict) {
      return dict.alteration;
  };
  var ordSInterval = new Data_Ord.Ord(function () {
      return eqSInterval;
  }, function (i1) {
      return function (i2) {
          return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordInt))([ diasteps(spelledSInterval)(i1), alteration(spelledSInterval)(i1) ])([ diasteps(spelledSInterval)(i2), alteration(spelledSInterval)(i2) ]);
      };
  });
  var spelledPitch = function (dictSpelled) {
      return function (dictHasIntervalClass) {
          return function (dictSpelled1) {
              return new Spelled(function (v) {
                  return alteration(dictSpelled1)(Data_Pitches_Class.ic(dictHasIntervalClass)(v));
              }, function (v) {
                  return degree(dictSpelled)(v);
              }, function (v) {
                  return diasteps(dictSpelled)(v);
              }, function (v) {
                  return fifths(dictSpelled)(v);
              }, function (v) {
                  return generic(dictSpelled)(v);
              }, function (v) {
                  return internalOctaves(dictSpelled)(v);
              }, function (v) {
                  return octaves(dictSpelled)(v);
              });
          };
      };
  }; 
  var accstr = function (n) {
      return function (lu) {
          return function (ld) {
              if (n === 0) {
                  return "";
              };
              if (n > 0) {
                  return Data_Monoid.power(Data_Monoid.monoidString)(lu)(n);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Monoid.power(Data_Monoid.monoidString)(ld)(Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(n));
              };
              throw new Error("Failed pattern match at Data.Pitches.Spelled (line 85, column 1 - line 85, column 44): " + [ n.constructor.name, lu.constructor.name, ld.constructor.name ]);
          };
      };
  }; 
  var showpitchSInterval = new Data_Pitches_Class.ShowPitch(function (i) {
      var accs = accstr(alteration(spelledPitch(spelledSInterval)(hasintervalclassSInterval)(spelledSIC))(i))("\u266f")("\u266d");
      return letter(spelledPitch(spelledSInterval)(hasintervalclassSInterval)(spelledSIC))(i) + (accs + Data_Show.show(Data_Show.showInt)(octaves(spelledPitch(spelledSInterval)(hasintervalclassSInterval)(spelledSIC))(i)));
  });
  exports["eqSInterval"] = eqSInterval;
  exports["ordSInterval"] = ordSInterval;
  exports["intervalSInterval"] = intervalSInterval;
  exports["hasintervalclassSInterval"] = hasintervalclassSInterval;
  exports["eqSIC"] = eqSIC;
  exports["intervalSIC"] = intervalSIC;
  exports["diatonicSIC"] = diatonicSIC;
  exports["showpitchSInterval"] = showpitchSInterval;
  exports["parsenotationSPitch"] = parsenotationSPitch;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var insertWith = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (v) {
                  return alter(dictOrd)((function () {
                      var $773 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                      return function ($774) {
                          return Data_Maybe.Just.create($773($774));
                      };
                  })())(k);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $775 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($776) {
                                  return Data_Maybe.Just.create($775($776));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["insertWith"] = insertWith;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["foldableMap"] = foldableMap;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Traversable.Accum.Internal"] = $PS["Data.Traversable.Accum.Internal"] || {};
  var exports = $PS["Data.Traversable.Accum.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var stateL = function (v) {
      return v;
  }; 
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateL(k)(s);
              return {
                  accum: v.accum,
                  value: f(v.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                  accum: v1.accum,
                  value: v.value(v1.value)
              };
          };
      };
  });
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s,
              value: a
          };
      };
  });
  exports["stateL"] = stateL;
  exports["applicativeStateL"] = applicativeStateL;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Traversable_Accum_Internal = $PS["Data.Traversable.Accum.Internal"];
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime,
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["for"] = $$for;
  exports["scanl"] = scanl;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Model"] = $PS["Model"] || {};
  var exports = $PS["Model"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Pitches_Class = $PS["Data.Pitches.Class"];
  var Data_Pitches_Spelled = $PS["Data.Pitches.Spelled"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];                          
  var TransId = function (x) {
      return x;
  };
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var Inner = (function () {
      function Inner(value0) {
          this.value0 = value0;
      };
      Inner.create = function (value0) {
          return new Inner(value0);
      };
      return Inner;
  })();
  var Stop = (function () {
      function Stop() {

      };
      Stop.value = new Stop();
      return Stop;
  })();
  var SliceId = function (x) {
      return x;
  };
  var RightRepeat = (function () {
      function RightRepeat() {

      };
      RightRepeat.value = new RightRepeat();
      return RightRepeat;
  })();
  var RightNeighbor = (function () {
      function RightNeighbor() {

      };
      RightNeighbor.value = new RightNeighbor();
      return RightNeighbor;
  })();
  var NoParents = (function () {
      function NoParents() {

      };
      NoParents.value = new NoParents();
      return NoParents;
  })();
  var VertParent = (function () {
      function VertParent(value0) {
          this.value0 = value0;
      };
      VertParent.create = function (value0) {
          return new VertParent(value0);
      };
      return VertParent;
  })();
  var MergeParents = (function () {
      function MergeParents(value0) {
          this.value0 = value0;
      };
      MergeParents.create = function (value0) {
          return new MergeParents(value0);
      };
      return MergeParents;
  })();
  var LeftRepeat = (function () {
      function LeftRepeat() {

      };
      LeftRepeat.value = new LeftRepeat();
      return LeftRepeat;
  })();
  var LeftNeighbor = (function () {
      function LeftNeighbor() {

      };
      LeftNeighbor.value = new LeftNeighbor();
      return LeftNeighbor;
  })();
  var FullNeighbor = (function () {
      function FullNeighbor() {

      };
      FullNeighbor.value = new FullNeighbor();
      return FullNeighbor;
  })();
  var FullRepeat = (function () {
      function FullRepeat() {

      };
      FullRepeat.value = new FullRepeat();
      return FullRepeat;
  })();
  var LeftRepeatOfRight = (function () {
      function LeftRepeatOfRight() {

      };
      LeftRepeatOfRight.value = new LeftRepeatOfRight();
      return LeftRepeatOfRight;
  })();
  var RightRepeatOfLeft = (function () {
      function RightRepeatOfLeft() {

      };
      RightRepeatOfLeft.value = new RightRepeatOfLeft();
      return RightRepeatOfLeft;
  })();
  var PassingMid = (function () {
      function PassingMid() {

      };
      PassingMid.value = new PassingMid();
      return PassingMid;
  })();
  var PassingLeft = (function () {
      function PassingLeft() {

      };
      PassingLeft.value = new PassingLeft();
      return PassingLeft;
  })();
  var PassingRight = (function () {
      function PassingRight() {

      };
      PassingRight.value = new PassingRight();
      return PassingRight;
  })();
  var NoExpl = (function () {
      function NoExpl() {

      };
      NoExpl.value = new NoExpl();
      return NoExpl;
  })();
  var RootExpl = (function () {
      function RootExpl() {

      };
      RootExpl.value = new RootExpl();
      return RootExpl;
  })();
  var HoriExpl = (function () {
      function HoriExpl(value0) {
          this.value0 = value0;
      };
      HoriExpl.create = function (value0) {
          return new HoriExpl(value0);
      };
      return HoriExpl;
  })();
  var RightExpl = (function () {
      function RightExpl(value0) {
          this.value0 = value0;
      };
      RightExpl.create = function (value0) {
          return new RightExpl(value0);
      };
      return RightExpl;
  })();
  var LeftExpl = (function () {
      function LeftExpl(value0) {
          this.value0 = value0;
      };
      LeftExpl.create = function (value0) {
          return new LeftExpl(value0);
      };
      return LeftExpl;
  })();
  var DoubleExpl = (function () {
      function DoubleExpl(value0) {
          this.value0 = value0;
      };
      DoubleExpl.create = function (value0) {
          return new DoubleExpl(value0);
      };
      return DoubleExpl;
  })();
  var Freeze = (function () {
      function Freeze() {

      };
      Freeze.value = new Freeze();
      return Freeze;
  })();
  var Split = (function () {
      function Split(value0) {
          this.value0 = value0;
      };
      Split.create = function (value0) {
          return new Split(value0);
      };
      return Split;
  })();
  var Hori = (function () {
      function Hori(value0) {
          this.value0 = value0;
      };
      Hori.create = function (value0) {
          return new Hori(value0);
      };
      return Hori;
  })();
  var vertEdgesRight = function (edges) {
      return function (slice) {
          var v = function (v1) {
              if (Data_Boolean.otherwise) {
                  return new Data_Either.Left("The current reduction is invalid: Trying to vert a Start or Stop slice.");
              };
              throw new Error("Failed pattern match at Model (line 576, column 1 - line 576, column 56): " + [ edges.constructor.name, slice.constructor.name ]);
          };
          if (slice.notes instanceof Inner) {
              var replaceLeft = function (v1) {
                  var v2 = function (v3) {
                      if (Data_Boolean.otherwise) {
                          return [  ];
                      };
                      throw new Error("Failed pattern match at Model (line 576, column 1 - line 576, column 56): " + [ v1.constructor.name ]);
                  };
                  if (v1.left instanceof Inner) {
                      var $218 = Data_Array.find(function (n) {
                          return n.note.id === v1.left.value0.id;
                      })(slice.notes.value0);
                      if ($218 instanceof Data_Maybe.Just) {
                          if ($218.value0.expl instanceof HoriExpl) {
                              return [ {
                                  left: new Inner($218.value0.expl.value0),
                                  right: v1.right
                              } ];
                          };
                          return v2(true);
                      };
                      return v2(true);
                  };
                  return v2(true);
              };
              return Data_Either.Right.create({
                  regular: Data_Array.concatMap(replaceLeft)(edges.regular),
                  passing: Data_Array.concatMap(replaceLeft)(edges.passing)
              });
          };
          return v(true);
      };
  };
  var vertEdgesLeft = function (edges) {
      return function (slice) {
          var v = function (v1) {
              if (Data_Boolean.otherwise) {
                  return new Data_Either.Left("The current reduction is invalid: Trying to vert a Start or Stop slice.");
              };
              throw new Error("Failed pattern match at Model (line 561, column 1 - line 561, column 55): " + [ edges.constructor.name, slice.constructor.name ]);
          };
          if (slice.notes instanceof Inner) {
              var replaceRight = function (v1) {
                  var v2 = function (v3) {
                      if (Data_Boolean.otherwise) {
                          return [  ];
                      };
                      throw new Error("Failed pattern match at Model (line 561, column 1 - line 561, column 55): " + [ v1.constructor.name ]);
                  };
                  if (v1.right instanceof Inner) {
                      var $236 = Data_Array.find(function (n) {
                          return n.note.id === v1.right.value0.id;
                      })(slice.notes.value0);
                      if ($236 instanceof Data_Maybe.Just) {
                          if ($236.value0.expl instanceof HoriExpl) {
                              return [ {
                                  left: v1.left,
                                  right: new Inner($236.value0.expl.value0)
                              } ];
                          };
                          return v2(true);
                      };
                      return v2(true);
                  };
                  return v2(true);
              };
              return Data_Either.Right.create({
                  regular: Data_Array.concatMap(replaceRight)(edges.regular),
                  passing: Data_Array.concatMap(replaceRight)(edges.passing)
              });
          };
          return v(true);
      };
  };
  var transEdges = function (trans) {
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(trans.edges.regular)(trans.edges.passing);
  };
  var thawTrans = function (ties) {
      return function (id) {
          return function (slice) {
              var notes = Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return v.note;
              })(slice);
              var findSecond = function (fst) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (snd) {
                      return {
                          left: new Inner(fst),
                          right: new Inner(snd)
                      };
                  })(Data_Foldable.find(Data_Foldable.foldableArray)(function (snd) {
                      return Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(snd.pitch)(fst.pitch);
                  })(notes));
              };
              return {
                  id: id,
                  is2nd: false,
                  edges: {
                      regular: Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(findSecond)(ties)),
                      passing: [  ]
                  }
              };
          };
      };
  };
  var thawSlice = function (slice) {
      return function (id) {
          return {
              id: id,
              notes: Inner.create(Data_Functor.map(Data_Functor.functorArray)(function (n) {
                  return {
                      note: n.note,
                      expl: NoExpl.value
                  };
              })(slice)),
              x: Data_Int.toNumber(id),
              parents: NoParents.value
          };
      };
  };
  var startSlice = {
      id: 0,
      notes: Start.value,
      x: 0.0,
      parents: NoParents.value
  };
  var thawPiece = function (piece) {
      var thaw = function (st) {
          return function (v) {
              var ties = Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return v1.note;
              })(Data_Array.filter(function (v1) {
                  return v1.hold;
              })(v.notes));
              var seg = new Data_Maybe.Just({
                  trans: thawTrans(st.ties)(st.i)(v.notes),
                  rslice: thawSlice(v.notes)(st.i + 1 | 0),
                  op: Freeze.value
              });
              return {
                  seg: seg,
                  ties: ties,
                  i: st.i + 1 | 0
              };
          };
      };
      var init = {
          seg: Data_Maybe.Nothing.value,
          ties: [  ],
          i: 0
      };
      var states = Data_Traversable.scanl(Data_Traversable.traversableArray)(thaw)(init)(piece);
      var imax = Data_Maybe.maybe(0)(function (v) {
          return v.i;
      })(Data_Array.last(states));
      var lastSeg = {
          trans: thawTrans([  ])(imax)([  ]),
          rslice: {
              id: imax + 1 | 0,
              notes: Stop.value,
              x: Data_Int.toNumber(imax + 1 | 0),
              parents: NoParents.value
          },
          op: Freeze.value
      };
      var segs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.seg;
      })(states)))([ lastSeg ]);
      return {
          start: startSlice,
          segments: Data_List.fromFoldable(Data_Foldable.foldableArray)(segs),
          nextSliceId: SliceId(imax + 2 | 0),
          nextTransId: TransId(imax + 1 | 0)
      };
  };
  var showTransId = new Data_Show.Show(function (v) {
      return "t" + Data_Show.show(Data_Show.showInt)(v);
  });
  var showStartStop = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Start) {
              return "\u22ca";
          };
          if (v instanceof Stop) {
              return "\u22c9";
          };
          if (v instanceof Inner) {
              return Data_Show.show(dictShow)(v.value0);
          };
          throw new Error("Failed pattern match at Model (line 238, column 1 - line 241, column 26): " + [ v.constructor.name ]);
      });
  };
  var showSliceId = new Data_Show.Show(function (v) {
      return "s" + Data_Show.show(Data_Show.showInt)(v);
  });
  var setHoriExplParent = function (child) {
      return function (parentMaybe) {
          return function (expl) {
              if (parentMaybe instanceof Data_Maybe.Just) {
                  if (expl instanceof NoExpl) {
                      return Data_Maybe.Just.create(new HoriExpl(parentMaybe.value0));
                  };
                  if (expl instanceof HoriExpl) {
                      return Data_Maybe.Just.create(new HoriExpl(parentMaybe.value0));
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (parentMaybe instanceof Data_Maybe.Nothing) {
                  if (expl instanceof HoriExpl) {
                      return new Data_Maybe.Just(NoExpl.value);
                  };
                  if (expl instanceof NoExpl) {
                      return new Data_Maybe.Just(NoExpl.value);
                  };
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Model (line 200, column 44 - line 208, column 17): " + [ parentMaybe.constructor.name ]);
          };
      };
  };
  var pbetween = function (dictInterval) {
      return function (dictEq) {
          return function (l) {
              return function (m) {
                  return function (r) {
                      var odir = Data_Pitches_Class.direction(dictInterval)(Data_Pitches_Class.pto(dictInterval)(l)(r));
                      var dir2 = Data_Pitches_Class.direction(dictInterval)(Data_Pitches_Class.pto(dictInterval)(m)(r));
                      var dir1 = Data_Pitches_Class.direction(dictInterval)(Data_Pitches_Class.pto(dictInterval)(l)(m));
                      return Data_Eq.notEq(Data_Pitches_Class.eqPitch(dictEq))(l)(m) && (Data_Eq.notEq(Data_Pitches_Class.eqPitch(dictEq))(m)(r) && (Data_Eq.notEq(Data_Pitches_Class.eqPitch(dictEq))(l)(r) && (Data_Eq.eq(Data_Ordering.eqOrdering)(dir1)(odir) && Data_Eq.eq(Data_Ordering.eqOrdering)(dir2)(odir))));
                  };
              };
          };
      };
  };
  var loadPiece = function (piece) {
      return {
          piece: piece,
          reduction: thawPiece(piece)
      };
  };
  var isRepeatingEdge = function (v) {
      if (v.left instanceof Inner && v.right instanceof Inner) {
          return Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(v.left.value0.pitch)(v.right.value0.pitch);
      };
      return false;
  };
  var incT = function (v) {
      return TransId(v + 1 | 0);
  };
  var incS = function (v) {
      return SliceId(v + 1 | 0);
  };
  var getParents = function (v) {
      if (v instanceof NoParents) {
          return [  ];
      };
      if (v instanceof VertParent) {
          return [ v.value0 ];
      };
      if (v instanceof MergeParents) {
          return [ v.value0.left, v.value0.right ];
      };
      throw new Error("Failed pattern match at Model (line 301, column 14 - line 304, column 50): " + [ v.constructor.name ]);
  };
  var getInnerNotes = function (slice) {
      if (slice.notes instanceof Start) {
          return [  ];
      };
      if (slice.notes instanceof Stop) {
          return [  ];
      };
      if (slice.notes instanceof Inner) {
          return slice.notes.value0;
      };
      throw new Error("Failed pattern match at Model (line 314, column 23 - line 317, column 23): " + [ slice.notes.constructor.name ]);
  };
  var genericRightOrnament = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof RightRepeat) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof RightNeighbor) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Model (line 35, column 1 - line 35, column 64): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return RightRepeat.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return RightNeighbor.value;
      };
      throw new Error("Failed pattern match at Model (line 35, column 1 - line 35, column 64): " + [ x.constructor.name ]);
  });
  var showRightOrnament = new Data_Show.Show(function (ro) {
      return Data_Show_Generic.genericShow(genericRightOrnament)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "RightRepeat";
      })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "RightNeighbor";
      }))))(ro);
  });
  var genericParents = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof NoParents) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof VertParent) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof MergeParents) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
      };
      throw new Error("Failed pattern match at Model (line 295, column 1 - line 295, column 56): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return NoParents.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new VertParent(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
          return new MergeParents(x.value0.value0);
      };
      throw new Error("Failed pattern match at Model (line 295, column 1 - line 295, column 56): " + [ x.constructor.name ]);
  });
  var showParents = function (dictShow) {
      return new Data_Show.Show(function (p) {
          return Data_Show_Generic.genericShow(genericParents)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
              return "NoParents";
          })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(dictShow))(new Data_Symbol.IsSymbol(function () {
              return "VertParent";
          })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "left";
          }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
              return "right";
          }))(Data_Show.showRecordFieldsNil)(dictShow))(dictShow))))(new Data_Symbol.IsSymbol(function () {
              return "MergeParents";
          })))))(p);
      });
  }; 
  var genericNoteExplanation = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof NoExpl) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof RootExpl) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof HoriExpl) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof RightExpl) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof LeftExpl) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
      };
      if (x instanceof DoubleExpl) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)))));
      };
      throw new Error("Failed pattern match at Model (line 77, column 1 - line 77, column 68): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return NoExpl.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return RootExpl.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new HoriExpl(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new RightExpl(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new LeftExpl(x.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
          return new DoubleExpl(x.value0.value0.value0.value0.value0);
      };
      throw new Error("Failed pattern match at Model (line 77, column 1 - line 77, column 68): " + [ x.constructor.name ]);
  });
  var genericLeftOrnament = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof LeftRepeat) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof LeftNeighbor) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Model (line 46, column 1 - line 46, column 62): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return LeftRepeat.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return LeftNeighbor.value;
      };
      throw new Error("Failed pattern match at Model (line 46, column 1 - line 46, column 62): " + [ x.constructor.name ]);
  });
  var showLeftOrnament = new Data_Show.Show(function (lo) {
      return Data_Show_Generic.genericShow(genericLeftOrnament)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "LeftRepeat";
      })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "LeftNeighbor";
      }))))(lo);
  });
  var genericDoubleOrnament = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof FullNeighbor) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof FullRepeat) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof LeftRepeatOfRight) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof RightRepeatOfLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
      };
      if (x instanceof PassingMid) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
      };
      if (x instanceof PassingLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
      };
      if (x instanceof PassingRight) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))));
      };
      throw new Error("Failed pattern match at Model (line 62, column 1 - line 62, column 66): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return FullNeighbor.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return FullRepeat.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return LeftRepeatOfRight.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return RightRepeatOfLeft.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return PassingMid.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return PassingLeft.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
          return PassingRight.value;
      };
      throw new Error("Failed pattern match at Model (line 62, column 1 - line 62, column 66): " + [ x.constructor.name ]);
  });
  var showDoubleOrnament = new Data_Show.Show(function (o) {
      return Data_Show_Generic.genericShow(genericDoubleOrnament)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "FullNeighbor";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "FullRepeat";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "LeftRepeatOfRight";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "RightRepeatOfLeft";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "PassingMid";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "PassingLeft";
      })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "PassingRight";
      })))))))))(o);
  });
  var showNoteExplanation = new Data_Show.Show(function (o) {
      return Data_Show_Generic.genericShow(genericNoteExplanation)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "NoExpl";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "RootExpl";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pitch";
      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
          return "HoriExpl";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "leftParent";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "orn";
      }))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(showRightOrnament)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pitch";
      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))))(new Data_Symbol.IsSymbol(function () {
          return "RightExpl";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "orn";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "rightParent";
      }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pitch";
      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(Data_Maybe.showMaybe(showLeftOrnament)))))(new Data_Symbol.IsSymbol(function () {
          return "LeftExpl";
      })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "leftParent";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "orn";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "rightParent";
      }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pitch";
      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(Data_Maybe.showMaybe(showDoubleOrnament)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pitch";
      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))))(new Data_Symbol.IsSymbol(function () {
          return "DoubleExpl";
      }))))))))(o);
  });
  var showReduction = function (v) {
      var showSegment$prime = function (indent) {
          return function (v1) {
              return Data_Monoid.power(Data_Monoid.monoidString)(" ")(indent) + ("trans: " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "edges";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "is2nd";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(showTransId))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "passing";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "regular";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "left";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "right";
              }))(Data_Show.showRecordFieldsNil)(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString)))))(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))))))(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "left";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "right";
              }))(Data_Show.showRecordFieldsNil)(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString)))))(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString)))))))))))(v1.trans) + (", op:" + showChildren(indent)(v1.op))));
          };
      };
      var showSegment = function (indent) {
          return function (v1) {
              return Data_Monoid.power(Data_Monoid.monoidString)(" ")(indent) + ("trans: " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "edges";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "is2nd";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(showTransId))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "passing";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "regular";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "left";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "right";
              }))(Data_Show.showRecordFieldsNil)(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString)))))(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))))))(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "left";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "right";
              }))(Data_Show.showRecordFieldsNil)(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString)))))(showStartStop(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString)))))))))))(v1.trans) + (", rslice: " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "notes";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "parents";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "x";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(showParents(showSliceId)))(showStartStop(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "expl";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "note";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(showNoteExplanation))))))(showSliceId)))(v1.rslice) + (", op:" + showChildren(indent)(v1.op))))));
          };
      };
      var showChildren = function (indent) {
          return function (v1) {
              if (v1 instanceof Freeze) {
                  return "Freeze";
              };
              if (v1 instanceof Split) {
                  return "Split\x0a" + (showSegment(indent + 1 | 0)(v1.value0.childl) + ("\x0a" + showSegment$prime(indent + 1 | 0)(v1.value0.childr)));
              };
              if (v1 instanceof Hori) {
                  return "Hori\x0a" + (showSegment(indent + 1 | 0)(v1.value0.childl) + ("\x0a" + (showSegment(indent + 1 | 0)(v1.value0.childm) + ("\x0a" + showSegment$prime(indent + 1 | 0)(v1.value0.childr)))));
              };
              throw new Error("Failed pattern match at Model (line 386, column 25 - line 399, column 44): " + [ v1.constructor.name ]);
          };
      };
      return Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a")(Data_Functor.map(Data_List_Types.functorList)(showSegment(0))(v.segments));
  };
  var functorStartStop = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Start) {
              return Start.value;
          };
          if (m instanceof Inner) {
              return new Inner(f(m.value0));
          };
          if (m instanceof Stop) {
              return Stop.value;
          };
          throw new Error("Failed pattern match at Model (line 234, column 1 - line 234, column 54): " + [ m.constructor.name ]);
      };
  });
  var resetExpls = function (seg) {
      return {
          trans: seg.trans,
          rslice: {
              id: seg.rslice.id,
              notes: Data_Functor.map(functorStartStop)(Data_Functor.map(Data_Functor.functorArray)(function (note) {
                  return {
                      expl: NoExpl.value,
                      note: note.note
                  };
              }))(seg.rslice.notes),
              x: seg.rslice.x,
              parents: seg.rslice.parents
          },
          op: seg.op
      };
  };
  var findRightOrn = function (child) {
      return function (v) {
          if (Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v.pitch))) {
              return new Data_Maybe.Just(RightRepeat.value);
          };
          if (Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v.pitch)))) {
              return new Data_Maybe.Just(RightNeighbor.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Model (line 120, column 1 - line 120, column 54): " + [ child.constructor.name, v.constructor.name ]);
      };
  };
  var findLeftOrn = function (child) {
      return function (v) {
          if (Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v.pitch))) {
              return new Data_Maybe.Just(LeftRepeat.value);
          };
          if (Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v.pitch)))) {
              return new Data_Maybe.Just(LeftNeighbor.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Model (line 114, column 1 - line 114, column 52): " + [ child.constructor.name, v.constructor.name ]);
      };
  };
  var findDoubleOrn = function (child) {
      return function (v) {
          return function (v1) {
              var v2 = function (v3) {
                  var v4 = function (v5) {
                      var v6 = function (v7) {
                          var v8 = function (v9) {
                              if (pbetween(Data_Pitches_Spelled.intervalSIC)(Data_Pitches_Spelled.eqSIC)(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v.pitch))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v1.pitch))) {
                                  var $384 = Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v.pitch)));
                                  if ($384) {
                                      var $385 = Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v1.pitch)));
                                      if ($385) {
                                          return new Data_Maybe.Just(PassingMid.value);
                                      };
                                      return new Data_Maybe.Just(PassingLeft.value);
                                  };
                                  var $386 = Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v1.pitch)));
                                  if ($386) {
                                      return new Data_Maybe.Just(PassingRight.value);
                                  };
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  return Data_Maybe.Nothing.value;
                              };
                              throw new Error("Failed pattern match at Model (line 135, column 1 - line 135, column 64): " + [ child.constructor.name, v.constructor.name, v1.constructor.name ]);
                          };
                          var $392 = Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v.pitch))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v1.pitch));
                          if ($392) {
                              var $393 = Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v.pitch)));
                              if ($393) {
                                  return new Data_Maybe.Just(FullNeighbor.value);
                              };
                              return v8(true);
                          };
                          return v8(true);
                      };
                      var $399 = Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v1.pitch));
                      if ($399) {
                          var $400 = Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v.pitch)));
                          if ($400) {
                              return new Data_Maybe.Just(LeftRepeatOfRight.value);
                          };
                          return v6(true);
                      };
                      return v6(true);
                  };
                  var $406 = Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v.pitch));
                  if ($406) {
                      var $407 = Data_Pitches_Class.isStep(Data_Pitches_Spelled.diatonicSIC)(Data_Pitches_Class.ic(Data_Pitches_Spelled.hasintervalclassSInterval)(Data_Pitches_Class.pto(Data_Pitches_Spelled.intervalSInterval)(child)(v1.pitch)));
                      if ($407) {
                          return new Data_Maybe.Just(RightRepeatOfLeft.value);
                      };
                      return v4(true);
                  };
                  return v4(true);
              };
              var $413 = Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v.pitch));
              if ($413) {
                  var $414 = Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSIC))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(child))(Data_Pitches_Class.pc(Data_Pitches_Spelled.hasintervalclassSInterval)(v1.pitch));
                  if ($414) {
                      return new Data_Maybe.Just(FullRepeat.value);
                  };
                  return v2(true);
              };
              return v2(true);
          };
      };
  };
  var setLeftExplParent = function (child) {
      return function (leftParentMaybe) {
          return function (expl) {
              if (leftParentMaybe instanceof Data_Maybe.Just) {
                  if (expl instanceof NoExpl) {
                      return Data_Maybe.Just.create(new RightExpl({
                          orn: findRightOrn(child)(leftParentMaybe.value0),
                          leftParent: leftParentMaybe.value0
                      }));
                  };
                  if (expl instanceof RightExpl) {
                      return Data_Maybe.Just.create(new RightExpl({
                          orn: findRightOrn(child)(leftParentMaybe.value0),
                          leftParent: leftParentMaybe.value0
                      }));
                  };
                  if (expl instanceof LeftExpl) {
                      return Data_Maybe.Just.create(new DoubleExpl({
                          orn: findDoubleOrn(child)(leftParentMaybe.value0)(expl.value0.rightParent),
                          leftParent: leftParentMaybe.value0,
                          rightParent: expl.value0.rightParent
                      }));
                  };
                  if (expl instanceof DoubleExpl) {
                      return Data_Maybe.Just.create(new DoubleExpl({
                          orn: findDoubleOrn(child)(leftParentMaybe.value0)(expl.value0.rightParent),
                          leftParent: leftParentMaybe.value0,
                          rightParent: expl.value0.rightParent
                      }));
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (leftParentMaybe instanceof Data_Maybe.Nothing) {
                  if (expl instanceof LeftExpl) {
                      return Data_Maybe.Just.create(new LeftExpl(expl.value0));
                  };
                  if (expl instanceof DoubleExpl) {
                      return Data_Maybe.Just.create(new LeftExpl({
                          orn: findLeftOrn(child)(expl.value0.rightParent),
                          rightParent: expl.value0.rightParent
                      }));
                  };
                  if (expl instanceof HoriExpl) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(NoExpl.value);
              };
              throw new Error("Failed pattern match at Model (line 148, column 48 - line 171, column 21): " + [ leftParentMaybe.constructor.name ]);
          };
      };
  };
  var setRightExplParent = function (child) {
      return function (rightParentMaybe) {
          return function (expl) {
              if (rightParentMaybe instanceof Data_Maybe.Just) {
                  if (expl instanceof NoExpl) {
                      return Data_Maybe.Just.create(new LeftExpl({
                          orn: findLeftOrn(child)(rightParentMaybe.value0),
                          rightParent: rightParentMaybe.value0
                      }));
                  };
                  if (expl instanceof LeftExpl) {
                      return Data_Maybe.Just.create(new LeftExpl({
                          orn: findLeftOrn(child)(rightParentMaybe.value0),
                          rightParent: rightParentMaybe.value0
                      }));
                  };
                  if (expl instanceof RightExpl) {
                      return Data_Maybe.Just.create(new DoubleExpl({
                          orn: findDoubleOrn(child)(expl.value0.leftParent)(rightParentMaybe.value0),
                          leftParent: expl.value0.leftParent,
                          rightParent: rightParentMaybe.value0
                      }));
                  };
                  if (expl instanceof DoubleExpl) {
                      return Data_Maybe.Just.create(new DoubleExpl({
                          orn: findDoubleOrn(child)(expl.value0.leftParent)(rightParentMaybe.value0),
                          leftParent: expl.value0.leftParent,
                          rightParent: rightParentMaybe.value0
                      }));
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (rightParentMaybe instanceof Data_Maybe.Nothing) {
                  if (expl instanceof RightExpl) {
                      return Data_Maybe.Just.create(new RightExpl(expl.value0));
                  };
                  if (expl instanceof DoubleExpl) {
                      return Data_Maybe.Just.create(new RightExpl({
                          orn: findRightOrn(child)(expl.value0.leftParent),
                          leftParent: expl.value0.leftParent
                      }));
                  };
                  if (expl instanceof HoriExpl) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(NoExpl.value);
              };
              throw new Error("Failed pattern match at Model (line 174, column 50 - line 197, column 21): " + [ rightParentMaybe.constructor.name ]);
          };
      };
  };
  var explIsSplit = function (v) {
      if (v instanceof HoriExpl) {
          return false;
      };
      return true;
  };
  var explIsHori = function (v) {
      if (v instanceof NoExpl) {
          return true;
      };
      if (v instanceof HoriExpl) {
          return true;
      };
      return false;
  };
  var explHasParent = function (id) {
      return function (v) {
          if (v instanceof NoExpl) {
              return false;
          };
          if (v instanceof RootExpl) {
              return false;
          };
          if (v instanceof HoriExpl) {
              return v.value0.id === id;
          };
          if (v instanceof RightExpl) {
              return v.value0.leftParent.id === id;
          };
          if (v instanceof LeftExpl) {
              return v.value0.rightParent.id === id;
          };
          if (v instanceof DoubleExpl) {
              return v.value0.leftParent.id === id || v.value0.rightParent.id === id;
          };
          throw new Error("Failed pattern match at Model (line 211, column 20 - line 217, column 88): " + [ v.constructor.name ]);
      };
  };
  var eqTransId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordTransId = new Data_Ord.Ord(function () {
      return eqTransId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var eqStartStop = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Start && y instanceof Start) {
                  return true;
              };
              if (x instanceof Inner && y instanceof Inner) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              if (x instanceof Stop && y instanceof Stop) {
                  return true;
              };
              return false;
          };
      });
  };
  var ordStartStop = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqStartStop(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Start && y instanceof Start) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Start) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Start) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Inner && y instanceof Inner) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              if (x instanceof Inner) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Inner) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Stop && y instanceof Stop) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Model (line 236, column 1 - line 236, column 61): " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var eqSliceId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordSliceId = new Data_Ord.Ord(function () {
      return eqSliceId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var eqRightOrnament = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof RightRepeat && y instanceof RightRepeat) {
              return true;
          };
          if (x instanceof RightNeighbor && y instanceof RightNeighbor) {
              return true;
          };
          return false;
      };
  });
  var eqParents = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof NoParents && y instanceof NoParents) {
                  return true;
              };
              if (x instanceof VertParent && y instanceof VertParent) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              if (x instanceof MergeParents && y instanceof MergeParents) {
                  return Data_Eq.eq(dictEq)(x.value0.left)(y.value0.left) && Data_Eq.eq(dictEq)(x.value0.right)(y.value0.right);
              };
              return false;
          };
      });
  };
  var eqLeftOrnament = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof LeftRepeat && y instanceof LeftRepeat) {
              return true;
          };
          if (x instanceof LeftNeighbor && y instanceof LeftNeighbor) {
              return true;
          };
          return false;
      };
  });
  var eqDoubleOrnament = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof FullNeighbor && y instanceof FullNeighbor) {
              return true;
          };
          if (x instanceof FullRepeat && y instanceof FullRepeat) {
              return true;
          };
          if (x instanceof LeftRepeatOfRight && y instanceof LeftRepeatOfRight) {
              return true;
          };
          if (x instanceof RightRepeatOfLeft && y instanceof RightRepeatOfLeft) {
              return true;
          };
          if (x instanceof PassingMid && y instanceof PassingMid) {
              return true;
          };
          if (x instanceof PassingLeft && y instanceof PassingLeft) {
              return true;
          };
          if (x instanceof PassingRight && y instanceof PassingRight) {
              return true;
          };
          return false;
      };
  });
  var eqNoteExplanation = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof NoExpl && y instanceof NoExpl) {
              return true;
          };
          if (x instanceof RootExpl && y instanceof RootExpl) {
              return true;
          };
          if (x instanceof HoriExpl && y instanceof HoriExpl) {
              return x.value0.id === y.value0.id && Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(x.value0.pitch)(y.value0.pitch);
          };
          if (x instanceof RightExpl && y instanceof RightExpl) {
              return x.value0.leftParent.id === y.value0.leftParent.id && Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(x.value0.leftParent.pitch)(y.value0.leftParent.pitch) && Data_Eq.eq(Data_Maybe.eqMaybe(eqRightOrnament))(x.value0.orn)(y.value0.orn);
          };
          if (x instanceof LeftExpl && y instanceof LeftExpl) {
              return Data_Eq.eq(Data_Maybe.eqMaybe(eqLeftOrnament))(x.value0.orn)(y.value0.orn) && (x.value0.rightParent.id === y.value0.rightParent.id && Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(x.value0.rightParent.pitch)(y.value0.rightParent.pitch));
          };
          if (x instanceof DoubleExpl && y instanceof DoubleExpl) {
              return x.value0.leftParent.id === y.value0.leftParent.id && Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(x.value0.leftParent.pitch)(y.value0.leftParent.pitch) && Data_Eq.eq(Data_Maybe.eqMaybe(eqDoubleOrnament))(x.value0.orn)(y.value0.orn) && (x.value0.rightParent.id === y.value0.rightParent.id && Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(x.value0.rightParent.pitch)(y.value0.rightParent.pitch));
          };
          return false;
      };
  });
  var setParents = function (p) {
      return function (seg) {
          var findUniqueVertExpl = function (parentSlice) {
              return function (child) {
                  var v = Data_Array.filter(function (pnote) {
                      return Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(pnote.note.pitch)(child.note.pitch);
                  })(getInnerNotes(parentSlice));
                  if (v.length === 1) {
                      return {
                          expl: new HoriExpl(v[0].note),
                          note: child.note
                      };
                  };
                  return child;
              };
          };
          var findUniqueMergeExpl = function (leftSlice) {
              return function (rightSlice) {
                  return function (child) {
                      var v = function (v1) {
                          var v2 = function (v3) {
                              if (Data_Boolean.otherwise) {
                                  return child;
                              };
                              throw new Error("Failed pattern match at Model (line 503, column 1 - line 503, column 50): " + [ leftSlice.constructor.name, rightSlice.constructor.name, child.constructor.name ]);
                          };
                          if (leftSlice.notes instanceof Inner) {
                              if (rightSlice.notes instanceof Inner) {
                                  var rightExpls = Data_Array.catMaybes(Control_Bind.bind(Control_Bind.bindArray)(leftSlice.notes.value0)(function (v3) {
                                      return Control_Applicative.pure(Control_Applicative.applicativeArray)(Control_Bind.bind(Data_Maybe.bindMaybe)(findRightOrn(child.note.pitch)(v3.note))(function (orn) {
                                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new RightExpl({
                                              orn: new Data_Maybe.Just(orn),
                                              leftParent: v3.note
                                          }));
                                      }));
                                  }));
                                  var leftExpls = Data_Array.catMaybes(Control_Bind.bind(Control_Bind.bindArray)(rightSlice.notes.value0)(function (v3) {
                                      return Control_Applicative.pure(Control_Applicative.applicativeArray)(Control_Bind.bind(Data_Maybe.bindMaybe)(findLeftOrn(child.note.pitch)(v3.note))(function (orn) {
                                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new LeftExpl({
                                              orn: new Data_Maybe.Just(orn),
                                              rightParent: v3.note
                                          }));
                                      }));
                                  }));
                                  var doubleExpls = Data_Array.catMaybes(Control_Bind.bind(Control_Bind.bindArray)(leftSlice.notes.value0)(function (v3) {
                                      return Control_Bind.bind(Control_Bind.bindArray)(rightSlice.notes.value0)(function (v4) {
                                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(Control_Bind.bind(Data_Maybe.bindMaybe)(findDoubleOrn(child.note.pitch)(v3.note)(v4.note))(function (orn) {
                                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new DoubleExpl({
                                                  orn: new Data_Maybe.Just(orn),
                                                  leftParent: v3.note,
                                                  rightParent: v4.note
                                              }));
                                          }));
                                      });
                                  }));
                                  if (doubleExpls.length === 1) {
                                      return {
                                          note: child.note,
                                          expl: doubleExpls[0]
                                      };
                                  };
                                  var v3 = Data_Semigroup.append(Data_Semigroup.semigroupArray)(leftExpls)(rightExpls);
                                  if (v3.length === 1) {
                                      return {
                                          note: child.note,
                                          expl: v3[0]
                                      };
                                  };
                                  return child;
                              };
                              return v2(true);
                          };
                          return v2(true);
                      };
                      var $533 = Data_Eq.eq(eqStartStop(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                          return "note";
                      }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                          return "pitch";
                      }))(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval)))()(new Data_Symbol.IsSymbol(function () {
                          return "id";
                      }))(Data_Eq.eqString))))()(new Data_Symbol.IsSymbol(function () {
                          return "expl";
                      }))(eqNoteExplanation)))))(leftSlice.notes)(Start.value);
                      if ($533) {
                          var $534 = Data_Eq.eq(eqStartStop(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                              return "note";
                          }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                              return "pitch";
                          }))(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval)))()(new Data_Symbol.IsSymbol(function () {
                              return "id";
                          }))(Data_Eq.eqString))))()(new Data_Symbol.IsSymbol(function () {
                              return "expl";
                          }))(eqNoteExplanation)))))(rightSlice.notes)(Stop.value);
                          if ($534) {
                              return {
                                  note: child.note,
                                  expl: RootExpl.value
                              };
                          };
                          return v(true);
                      };
                      return v(true);
                  };
              };
          };
          if (p instanceof NoParents) {
              return {
                  trans: seg.trans,
                  rslice: {
                      id: seg.rslice.id,
                      notes: seg.rslice.notes,
                      x: seg.rslice.x,
                      parents: NoParents.value
                  },
                  op: seg.op
              };
          };
          if (p instanceof VertParent) {
              return {
                  trans: seg.trans,
                  rslice: {
                      id: seg.rslice.id,
                      notes: Data_Functor.map(functorStartStop)(Data_Functor.map(Data_Functor.functorArray)(findUniqueVertExpl(p.value0)))(seg.rslice.notes),
                      x: seg.rslice.x,
                      parents: new VertParent(p.value0.id)
                  },
                  op: seg.op
              };
          };
          if (p instanceof MergeParents) {
              return {
                  trans: seg.trans,
                  rslice: {
                      id: seg.rslice.id,
                      notes: Data_Functor.map(functorStartStop)(Data_Functor.map(Data_Functor.functorArray)(findUniqueMergeExpl(p.value0.left)(p.value0.right)))(seg.rslice.notes),
                      x: seg.rslice.x,
                      parents: new MergeParents({
                          left: p.value0.left.id,
                          right: p.value0.right.id
                      })
                  },
                  op: seg.op
              };
          };
          throw new Error("Failed pattern match at Model (line 504, column 20 - line 519, column 8): " + [ p.constructor.name ]);
      };
  };
  var emptyEdges = {
      regular: [  ],
      passing: [  ]
  };
  var explParentEdge = function (v) {
      if (v instanceof DoubleExpl) {
          var parentEdge = {
              left: new Inner(v.value0.leftParent),
              right: new Inner(v.value0.rightParent)
          };
          if (v.value0.orn instanceof Data_Maybe.Just && v.value0.orn.value0 instanceof PassingMid) {
              return {
                  regular: emptyEdges.regular,
                  passing: [ parentEdge ]
              };
          };
          if (v.value0.orn instanceof Data_Maybe.Just && v.value0.orn.value0 instanceof PassingLeft) {
              return {
                  regular: emptyEdges.regular,
                  passing: [ parentEdge ]
              };
          };
          if (v.value0.orn instanceof Data_Maybe.Just && v.value0.orn.value0 instanceof PassingRight) {
              return {
                  regular: emptyEdges.regular,
                  passing: [ parentEdge ]
              };
          };
          return {
              regular: [ parentEdge ],
              passing: emptyEdges.passing
          };
      };
      if (v instanceof RootExpl) {
          return {
              regular: [ {
                  left: Start.value,
                  right: Stop.value
              } ],
              passing: emptyEdges.passing
          };
      };
      return emptyEdges;
  };
  var parentEdges = (function () {
      var collectParents = function (acc) {
          return function (e) {
              return Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "passing";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "regular";
              }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(acc)(explParentEdge(e));
          };
      };
      return function (v) {
          if (v.notes instanceof Inner) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(collectParents)({
                  regular: [  ],
                  passing: [  ]
              })(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return v1.expl;
              })(v.notes.value0));
          };
          return emptyEdges;
      };
  })();
  var noteSetExplanation = function (noteId) {
      return function (expl) {
          return function (model) {
              var setNoteExplInSlice = function (slice) {
                  return {
                      id: slice.id,
                      notes: Data_Functor.map(functorStartStop)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
                          var $552 = n.note.id === noteId;
                          if ($552) {
                              return {
                                  expl: expl,
                                  note: n.note
                              };
                          };
                          return n;
                      }))(slice.notes),
                      x: slice.x,
                      parents: slice.parents
                  };
              };
              var noteInSlice = function (slice) {
                  return Data_Array.any(function (n) {
                      return n.note.id === noteId;
                  })(getInnerNotes(slice));
              };
              var notFound = Data_Either.Left.create("Note " + (noteId + " not found"));
              var doSegment$prime = function (upFromLeft) {
                  return function (seg) {
                      if (seg.op instanceof Freeze) {
                          if (upFromLeft instanceof Data_List_Types.Nil) {
                              return Data_Either.Right.create({
                                  "seg'": seg,
                                  rUp: Data_List_Types.Nil.value
                              });
                          };
                          if (upFromLeft instanceof Data_List_Types.Cons) {
                              return Data_Either.Right.create({
                                  "seg'": (function () {
                                      var $555 = {};
                                      for (var $556 in seg) {
                                          if ({}.hasOwnProperty.call(seg, $556)) {
                                              $555[$556] = seg[$556];
                                          };
                                      };
                                      $555.trans = {
                                          edges: upFromLeft.value0,
                                          id: seg.trans.id,
                                          is2nd: seg.trans.is2nd
                                      };
                                      return $555;
                                  })(),
                                  rUp: upFromLeft.value1
                              });
                          };
                          throw new Error("Failed pattern match at Model (line 839, column 15 - line 841, column 86): " + [ upFromLeft.constructor.name ]);
                      };
                      if (seg.op instanceof Split) {
                          return Control_Bind.bind(Data_Either.bindEither)(doSegment(upFromLeft)(seg.op.value0.childl))(function (v) {
                              return Control_Bind.bind(Data_Either.bindEither)(doSegment$prime(v.rUp)(seg.op.value0.childr))(function (v1) {
                                  var segNewOp = (function () {
                                      var $562 = {};
                                      for (var $563 in seg) {
                                          if ({}.hasOwnProperty.call(seg, $563)) {
                                              $562[$563] = seg[$563];
                                          };
                                      };
                                      $562.op = new Split({
                                          childl: v["seg'"],
                                          childr: v1["seg'"]
                                      });
                                      return $562;
                                  })();
                                  return Control_Bind.bind(Data_Either.bindEither)((function () {
                                      var $565 = noteInSlice(seg.op.value0.childl.rslice);
                                      if ($565) {
                                          var $566 = explIsSplit(expl);
                                          if ($566) {
                                              return Control_Applicative.pure(Data_Either.applicativeEither)((function () {
                                                  var $567 = {};
                                                  for (var $568 in segNewOp) {
                                                      if ({}.hasOwnProperty.call(segNewOp, $568)) {
                                                          $567[$568] = segNewOp[$568];
                                                      };
                                                  };
                                                  $567.trans = {
                                                      edges: parentEdges(v["seg'"].rslice),
                                                      id: segNewOp.trans.id,
                                                      is2nd: segNewOp.trans.is2nd
                                                  };
                                                  return $567;
                                              })());
                                          };
                                          return new Data_Either.Left("Cannot explain a split note with a hori.");
                                      };
                                      return Control_Applicative.pure(Data_Either.applicativeEither)(segNewOp);
                                  })())(function (seg$prime) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          "seg'": seg$prime,
                                          rUp: v1.rUp
                                      });
                                  });
                              });
                          });
                      };
                      if (seg.op instanceof Hori) {
                          return Control_Bind.bind(Data_Either.bindEither)(doSegment(upFromLeft)(seg.op.value0.childl))(function (v) {
                              return Control_Bind.bind(Data_Either.bindEither)(doSegment(v.rUp)(seg.op.value0.childm))(function (v1) {
                                  return Control_Bind.bind(Data_Either.bindEither)(doSegment$prime(v1.rUp)(seg.op.value0.childr))(function (v2) {
                                      return Control_Bind.bind(Data_Either.bindEither)(vertEdgesLeft(v["seg'"].trans.edges)(v["seg'"].rslice))(function (leftParentEdges) {
                                          return Control_Bind.bind(Data_Either.bindEither)(vertEdgesRight(v2["seg'"].trans.edges)(v1["seg'"].rslice))(function (rightParentEdges) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)((function () {
                                                  var $580 = (noteInSlice(seg.op.value0.childl.rslice) || noteInSlice(seg.op.value0.childm.rslice)) && !explIsHori(expl);
                                                  if ($580) {
                                                      return Data_Either.Left.create("Cannot explain a hori note with a split. noteId = " + (Data_Show.show(Data_Show.showString)(noteId) + (", childl.rslice = " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "id";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "notes";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "parents";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "x";
                                                      }))(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(showParents(showSliceId)))(showStartStop(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "expl";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "note";
                                                      }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "id";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "pitch";
                                                      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(showNoteExplanation))))))(showSliceId)))(seg.op.value0.childl.rslice) + (", childm.rslice = " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "id";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "notes";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "parents";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "x";
                                                      }))(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(showParents(showSliceId)))(showStartStop(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "expl";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "note";
                                                      }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "id";
                                                      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                          return "pitch";
                                                      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(showNoteExplanation))))))(showSliceId)))(seg.op.value0.childm.rslice))))));
                                                  };
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
                                              })())(function () {
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                      "seg'": (function () {
                                                          var $581 = {};
                                                          for (var $582 in seg) {
                                                              if ({}.hasOwnProperty.call(seg, $582)) {
                                                                  $581[$582] = seg[$582];
                                                              };
                                                          };
                                                          $581.op = new Hori({
                                                              childl: v["seg'"],
                                                              childm: v1["seg'"],
                                                              childr: v2["seg'"]
                                                          });
                                                          $581.trans = {
                                                              edges: leftParentEdges,
                                                              id: seg.trans.id,
                                                              is2nd: seg.trans.is2nd
                                                          };
                                                          return $581;
                                                      })(),
                                                      rUp: new Data_List_Types.Cons(rightParentEdges, v2.rUp)
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Model (line 838, column 31 - line 879, column 12): " + [ seg.op.constructor.name ]);
                  };
              };
              var doSegment = function (upFromLeft) {
                  return function (seg) {
                      var rslice$prime = (function () {
                          var $594 = noteInSlice(seg.rslice);
                          if ($594) {
                              return setNoteExplInSlice(seg.rslice);
                          };
                          return seg.rslice;
                      })();
                      return Data_Functor.map(Data_Either.functorEither)(function (v) {
                          return {
                              "seg'": {
                                  rslice: rslice$prime,
                                  op: v["seg'"].op,
                                  trans: v["seg'"].trans
                              },
                              rUp: v.rUp
                          };
                      })(doSegment$prime(upFromLeft)(seg));
                  };
              };
              var traverseTop = function (upFromLeft) {
                  return function (v) {
                      if (v instanceof Data_List_Types.Nil) {
                          return new Data_Either.Right(Data_List_Types.Nil.value);
                      };
                      if (v instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind(Data_Either.bindEither)(doSegment(upFromLeft)(v.value0))(function (v1) {
                              return Control_Bind.bind(Data_Either.bindEither)(traverseTop(v1.rUp)(v.value1))(function (rest$prime) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_List_Types.Cons(v1["seg'"], rest$prime));
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Model (line 825, column 28 - line 830, column 29): " + [ v.constructor.name ]);
                  };
              };
              var v = traverseTop(Data_List_Types.Nil.value)(model.reduction.segments);
              if (v instanceof Data_Either.Right) {
                  return new Data_Either.Right({
                      reduction: {
                          segments: v.value0,
                          nextSliceId: model.reduction.nextSliceId,
                          nextTransId: model.reduction.nextTransId,
                          start: model.reduction.start
                      },
                      piece: model.piece
                  });
              };
              if (v instanceof Data_Either.Left) {
                  return new Data_Either.Left(v.value0);
              };
              throw new Error("Failed pattern match at Model (line 812, column 40 - line 814, column 23): " + [ v.constructor.name ]);
          };
      };
  };
  var doAt = function (match) {
      return function (f) {
          return function (red) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          return new Data_Either.Left("not found");
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          var v2 = match(v1);
                          if (v2 instanceof Data_Maybe.Just) {
                              return Data_Functor.map(Data_Either.functorEither)(function (result) {
                                  return Data_Semigroup.append(Data_List_Types.semigroupList)(result)(v2.value0.value1);
                              })(f(v)(v2.value0.value0));
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Data_Functor.map(Data_Either.functorEither)(Data_List_Types.Cons.create(v1.value0))(go(v1.value0.rslice)(v1.value1));
                          };
                          throw new Error("Failed pattern match at Model (line 499, column 39 - line 501, column 47): " + [ v2.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Model (line 496, column 3 - line 496, column 62): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return go(red.start)(red.segments);
          };
      };
  };
  var detachSegment = function (v) {
      return {
          trans: v.trans,
          op: v.op
      };
  };
  var mkMerge = function (tid) {
      return function (leftSlice) {
          return function (seg1) {
              return function (seg2) {
                  var pars = new MergeParents({
                      left: leftSlice,
                      right: seg2.rslice
                  });
                  var seg1$prime = setParents(pars)(seg1);
                  var op = new Split({
                      childl: seg1$prime,
                      childr: detachSegment(seg2)
                  });
                  return {
                      trans: {
                          id: tid,
                          edges: parentEdges(seg1$prime.rslice),
                          is2nd: seg1.trans.is2nd
                      },
                      rslice: seg2.rslice,
                      op: op
                  };
              };
          };
      };
  };
  var mergeAtSlice = function (sliceId) {
      return function (model) {
          var tryMerge = function (leftSlice) {
              return function (v) {
                  return Data_Either.Right.create(new Data_List_Types.Cons(mkMerge(model.reduction.nextTransId)(leftSlice)(v.seg1)(v.seg2), Data_List_Types.Nil.value));
              };
          };
          var matchSlice = function (v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
                  var $620 = Data_Eq.eq(eqSliceId)(v.value0.rslice.id)(sliceId);
                  if ($620) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple({
                          seg1: v.value0,
                          seg2: v.value1.value0
                      }, v.value1.value1));
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
          var v = doAt(matchSlice)(tryMerge)(model.reduction);
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  reduction: {
                      segments: v.value0,
                      nextTransId: incT(model.reduction.nextTransId),
                      nextSliceId: model.reduction.nextSliceId,
                      start: model.reduction.start
                  },
                  piece: model.piece
              });
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          throw new Error("Failed pattern match at Model (line 607, column 30 - line 609, column 23): " + [ v.constructor.name ]);
      };
  };
  var attachSegment = function (v) {
      return function (rslice) {
          return {
              trans: v.trans,
              op: v.op,
              rslice: rslice
          };
      };
  };
  var mkVert = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      if (v2.rslice.notes instanceof Inner && v3.rslice.notes instanceof Inner) {
                          if (!Data_Array.all(isRepeatingEdge)(v3.trans.edges.regular)) {
                              return new Data_Either.Left("Middle transition of a vert must only contain repetition and passing edges!");
                          };
                          if (Data_Boolean.otherwise) {
                              var newNotes = function (counts) {
                                  var pitches = Data_Array.reverse(Data_Array.concatMap(function (v5) {
                                      return Data_Array.replicate(v5.value1)(v5.value0);
                                  })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(counts)));
                                  var mkNote = function (i) {
                                      return function (p) {
                                          return {
                                              note: {
                                                  pitch: p,
                                                  id: "note" + (Data_Show.show(showSliceId)(v1) + ("." + Data_Show.show(Data_Show.showInt)(i)))
                                              },
                                              expl: NoExpl.value
                                          };
                                      };
                                  };
                                  return Data_Array.mapWithIndex(mkNote)(pitches);
                              };
                              var countPitches = function (notes) {
                                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (counts) {
                                      return function (n) {
                                          return Data_Map_Internal.insertWith(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval))(Data_Semiring.add(Data_Semiring.semiringInt))(n.note.pitch)(1)(counts);
                                      };
                                  })(Data_Map_Internal.empty)(notes);
                              };
                              var topSlice = {
                                  notes: Inner.create(newNotes(Data_Map_Internal.unionWith(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval))(Data_Ord.max(Data_Ord.ordInt))(countPitches(v2.rslice.notes.value0))(countPitches(v3.rslice.notes.value0)))),
                                  id: v1,
                                  x: (v2.rslice.x + v3.rslice.x) / 2.0,
                                  parents: NoParents.value
                              };
                              var childm = setParents(new VertParent(topSlice))(v3);
                              var mkLeftParent = function (lfound) {
                                  var childl = setParents(new VertParent(topSlice))(attachSegment(lfound)(v2.rslice));
                                  return Control_Bind.bind(Data_Either.bindEither)(vertEdgesLeft(lfound.trans.edges)(childl.rslice))(function (leftEdges) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          trans: {
                                              id: v,
                                              is2nd: false,
                                              edges: leftEdges
                                          },
                                          op: new Hori({
                                              childl: childl,
                                              childm: childm,
                                              childr: detachSegment(v4)
                                          })
                                      });
                                  });
                              };
                              return Control_Bind.bind(Data_Either.bindEither)(vertEdgesRight(v4.trans.edges)(childm.rslice))(function (rightEdges) {
                                  var rightParent = {
                                      trans: {
                                          id: incT(v),
                                          is2nd: true,
                                          edges: rightEdges
                                      },
                                      rslice: v4.rslice,
                                      op: Freeze.value
                                  };
                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                      mkLeftParent: mkLeftParent,
                                      rightParent: rightParent,
                                      topSlice: topSlice
                                  });
                              });
                          };
                      };
                      return new Data_Either.Left("Cannot vert an outer slice!");
                  };
              };
          };
      };
  };
  var undoMergeAtTrans = function (transId) {
      return function (model) {
          var tryUnmerge = function (v) {
              return function (seg) {
                  if (seg.op instanceof Split) {
                      return Data_Either.Right.create(new Data_List_Types.Cons(resetExpls(setParents(NoParents.value)(seg.op.value0.childl)), new Data_List_Types.Cons(attachSegment(seg.op.value0.childr)(seg.rslice), Data_List_Types.Nil.value)));
                  };
                  return new Data_Either.Left("Operation is not a split!");
              };
          };
          var matchTrans = function (v) {
              if (v instanceof Data_List_Types.Cons) {
                  var $651 = Data_Eq.eq(eqTransId)(v.value0.trans.id)(transId);
                  if ($651) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
          var v = doAt(matchTrans)(tryUnmerge)(model.reduction);
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  reduction: {
                      segments: v.value0,
                      nextSliceId: model.reduction.nextSliceId,
                      nextTransId: model.reduction.nextTransId,
                      start: model.reduction.start
                  },
                  piece: model.piece
              });
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          throw new Error("Failed pattern match at Model (line 776, column 34 - line 778, column 23): " + [ v.constructor.name ]);
      };
  };
  var undoVertAtSlice = function (sliceId) {
      return function (model) {
          var tryUnvert = function (v) {
              return function (v1) {
                  if (v1.pl.op instanceof Hori) {
                      return Data_Either.Right.create(new Data_List_Types.Cons(resetExpls(setParents(NoParents.value)(v1.pl.op.value0.childl)), new Data_List_Types.Cons(resetExpls(setParents(NoParents.value)(v1.pl.op.value0.childm)), new Data_List_Types.Cons(attachSegment(v1.pl.op.value0.childr)(v1.pr.rslice), Data_List_Types.Nil.value))));
                  };
                  return new Data_Either.Left("Operation is not a hori!");
              };
          };
          var matchSlice = function (v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
                  var $667 = Data_Eq.eq(eqSliceId)(v.value0.rslice.id)(sliceId);
                  if ($667) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple({
                          pl: v.value0,
                          pr: v.value1.value0
                      }, v.value1.value1));
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
          var v = doAt(matchSlice)(tryUnvert)(model.reduction);
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  reduction: {
                      segments: v.value0,
                      nextSliceId: model.reduction.nextSliceId,
                      nextTransId: model.reduction.nextTransId,
                      start: model.reduction.start
                  },
                  piece: model.piece
              });
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          throw new Error("Failed pattern match at Model (line 794, column 33 - line 796, column 23): " + [ v.constructor.name ]);
      };
  };
  var vertAtMid = function (transId) {
      return function (model) {
          var insertDangling = function (dist) {
              return function (topSlice) {
                  return function (mkLeftParent) {
                      return function (leftSlice) {
                          return function (seg) {
                              var v = function (v1) {
                                  if (Data_Boolean.otherwise) {
                                      if (seg.op instanceof Freeze) {
                                          return new Data_Either.Right({
                                              "seg'": seg,
                                              leftover: new Data_Maybe.Just(0)
                                          });
                                      };
                                      if (seg.op instanceof Split) {
                                          return Control_Bind.bind(Data_Either.bindEither)(insertDangling(dist)(topSlice)(mkLeftParent)(seg.op.value0.childl.rslice)(seg.op.value0.childr))(function (v2) {
                                              return Control_Bind.bind(Data_Either.bindEither)((function () {
                                                  var $682 = dist === 0;
                                                  if ($682) {
                                                      if (seg.op.value0.childl.rslice.parents instanceof MergeParents) {
                                                          return Data_Either.Right.create(resetExpls(setParents(new MergeParents({
                                                              left: leftSlice,
                                                              right: topSlice
                                                          }))(seg.op.value0.childl)));
                                                      };
                                                      return new Data_Either.Left("invalid derivation structure: non-merge parents on merge slice");
                                                  };
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)(seg.op.value0.childl);
                                              })())(function (childlFixed) {
                                                  if (v2.leftover instanceof Data_Maybe.Nothing) {
                                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                          "seg'": {
                                                              op: new Split({
                                                                  childl: childlFixed,
                                                                  childr: v2["seg'"]
                                                              }),
                                                              trans: seg.trans
                                                          },
                                                          leftover: Data_Maybe.Nothing.value
                                                      });
                                                  };
                                                  if (v2.leftover instanceof Data_Maybe.Just) {
                                                      return Control_Bind.bind(Data_Either.bindEither)(insertDangling((dist + v2.leftover.value0 | 0) + 1 | 0)(topSlice)(mkLeftParent)(leftSlice)(detachSegment(childlFixed)))(function (v3) {
                                                          var childl$prime = attachSegment(v3["seg'"])(childlFixed.rslice);
                                                          var seg$prime = {
                                                              op: new Split({
                                                                  childl: childl$prime,
                                                                  childr: v2["seg'"]
                                                              }),
                                                              trans: seg.trans
                                                          };
                                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                              "seg'": seg$prime,
                                                              leftover: Data_Functor.map(Data_Maybe.functorMaybe)(function (v4) {
                                                                  return v4 + 1 | 0;
                                                              })(v3.leftover)
                                                          });
                                                      });
                                                  };
                                                  throw new Error("Failed pattern match at Model (line 746, column 9 - line 754, column 55): " + [ v2.leftover.constructor.name ]);
                                              });
                                          });
                                      };
                                      if (seg.op instanceof Hori) {
                                          return Control_Bind.bind(Data_Either.bindEither)(insertDangling(dist - 1 | 0)(topSlice)(mkLeftParent)(seg.op.value0.childm.rslice)(seg.op.value0.childr))(function (v2) {
                                              if (v2.leftover instanceof Data_Maybe.Nothing) {
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                      "seg'": {
                                                          op: new Hori({
                                                              childl: seg.op.value0.childl,
                                                              childm: seg.op.value0.childm,
                                                              childr: v2["seg'"]
                                                          }),
                                                          trans: seg.trans
                                                      },
                                                      leftover: Data_Maybe.Nothing.value
                                                  });
                                              };
                                              if (v2.leftover instanceof Data_Maybe.Just) {
                                                  return Control_Bind.bind(Data_Either.bindEither)(insertDangling(dist + v2.leftover.value0 | 0)(topSlice)(mkLeftParent)(seg.op.value0.childl.rslice)(detachSegment(seg.op.value0.childm)))(function (v3) {
                                                      var childm$prime = attachSegment(v3["seg'"])(seg.op.value0.childm.rslice);
                                                      if (v3.leftover instanceof Data_Maybe.Nothing) {
                                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                              "seg'": {
                                                                  op: new Hori({
                                                                      childl: seg.op.value0.childl,
                                                                      childm: childm$prime,
                                                                      childr: v2["seg'"]
                                                                  }),
                                                                  trans: seg.trans
                                                              },
                                                              leftover: Data_Maybe.Nothing.value
                                                          });
                                                      };
                                                      if (v3.leftover instanceof Data_Maybe.Just) {
                                                          return Control_Bind.bind(Data_Either.bindEither)(insertDangling((dist + 1 | 0) + v3.leftover.value0 | 0)(topSlice)(mkLeftParent)(leftSlice)(detachSegment(seg.op.value0.childl)))(function (v4) {
                                                              var childl$prime = attachSegment(v4["seg'"])(seg.op.value0.childl.rslice);
                                                              var seg$prime = {
                                                                  op: new Hori({
                                                                      childl: childl$prime,
                                                                      childm: childm$prime,
                                                                      childr: v2["seg'"]
                                                                  }),
                                                                  trans: seg.trans
                                                              };
                                                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                                  "seg'": seg$prime,
                                                                  leftover: Data_Functor.map(Data_Maybe.functorMaybe)(function (v5) {
                                                                      return v5 + 2 | 0;
                                                                  })(v4.leftover)
                                                              });
                                                          });
                                                      };
                                                      throw new Error("Failed pattern match at Model (line 764, column 13 - line 772, column 57): " + [ v3.leftover.constructor.name ]);
                                                  });
                                              };
                                              throw new Error("Failed pattern match at Model (line 758, column 9 - line 772, column 57): " + [ v2.leftover.constructor.name ]);
                                          });
                                      };
                                      throw new Error("Failed pattern match at Model (line 734, column 19 - line 772, column 57): " + [ seg.op.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Model (line 661, column 1 - line 661, column 53): " + [ dist.constructor.name, topSlice.constructor.name, mkLeftParent.constructor.name, leftSlice.constructor.name, seg.constructor.name ]);
                              };
                              var $718 = dist === 0;
                              if ($718) {
                                  var $719 = !seg.trans.is2nd;
                                  if ($719) {
                                      return Control_Bind.bind(Data_Either.bindEither)(mkLeftParent(seg))(function (seg$prime) {
                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                              "seg'": seg$prime,
                                              leftover: Data_Maybe.Nothing.value
                                          });
                                      });
                                  };
                                  return v(true);
                              };
                              return v(true);
                          };
                      };
                  };
              };
          };
          var tryInsert = function (dist) {
              return function (topSlice) {
                  return function (mkLeftParent) {
                      return function (leftSlice) {
                          return function (l) {
                              return function (t$prime) {
                                  return Control_Bind.bind(Data_Either.bindEither)(insertDangling(dist)(topSlice)(mkLeftParent)(leftSlice)(detachSegment(l)))(function (v) {
                                      var tail$prime = new Data_List_Types.Cons(attachSegment(v["seg'"])(l.rslice), t$prime);
                                      return Control_Applicative.pure(Data_Either.applicativeEither)((function () {
                                          if (v.leftover instanceof Data_Maybe.Nothing) {
                                              return {
                                                  "tail'": tail$prime,
                                                  dangling: Data_Maybe.Nothing.value
                                              };
                                          };
                                          if (v.leftover instanceof Data_Maybe.Just) {
                                              return {
                                                  "tail'": tail$prime,
                                                  dangling: new Data_Maybe.Just({
                                                      dist: (dist + 1 | 0) + v.leftover.value0 | 0,
                                                      mkLeftParent: mkLeftParent,
                                                      topSlice: topSlice
                                                  })
                                              };
                                          };
                                          throw new Error("Failed pattern match at Model (line 713, column 10 - line 715, column 89): " + [ v.leftover.constructor.name ]);
                                      })());
                                  });
                              };
                          };
                      };
                  };
              };
          };
          var doVert = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_List_Types.Cons && (v1.value1 instanceof Data_List_Types.Cons && v1.value1.value1 instanceof Data_List_Types.Cons)) {
                      if (Data_Eq.eq(eqTransId)(v1.value1.value0.trans.id)(transId)) {
                          return Control_Bind.bind(Data_Either.bindEither)(mkVert(model.reduction.nextTransId)(model.reduction.nextSliceId)(v1.value0)(v1.value1.value0)(v1.value1.value1.value0))(function (v2) {
                              return tryInsert(0)(v2.topSlice)(v2.mkLeftParent)(v)({
                                  trans: v1.value0.trans,
                                  rslice: v2.topSlice,
                                  op: v1.value0.op
                              })(new Data_List_Types.Cons(v2.rightParent, v1.value1.value1.value1));
                          });
                      };
                      if (Data_Boolean.otherwise) {
                          return Control_Bind.bind(Data_Either.bindEither)(doVert(v1.value0.rslice)(v1.value1))(function (v2) {
                              if (v2.dangling instanceof Data_Maybe.Nothing) {
                                  return new Data_Either.Right({
                                      "tail'": new Data_List_Types.Cons(v1.value0, v2["tail'"]),
                                      dangling: Data_Maybe.Nothing.value
                                  });
                              };
                              if (v2.dangling instanceof Data_Maybe.Just) {
                                  return tryInsert(v2.dangling.value0.dist)(v2.dangling.value0.topSlice)(v2.dangling.value0.mkLeftParent)(v)(v1.value0)(v2["tail'"]);
                              };
                              throw new Error("Failed pattern match at Model (line 693, column 7 - line 695, column 104): " + [ v2.dangling.constructor.name ]);
                          });
                      };
                  };
                  return Data_Either.Left.create("Cannot hori at " + Data_Show.show(showTransId)(transId));
              };
          };
          var v = doVert(model.reduction.start)(model.reduction.segments);
          if (v instanceof Data_Either.Right) {
              if (v.value0.dangling instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Right({
                      reduction: {
                          segments: v["value0"]["tail'"],
                          nextTransId: incT(incT(model.reduction.nextTransId)),
                          nextSliceId: incS(model.reduction.nextSliceId),
                          start: model.reduction.start
                      },
                      piece: model.piece
                  });
              };
              if (v.value0.dangling instanceof Data_Maybe.Just) {
                  return new Data_Either.Left("Failed to insert hori!");
              };
              throw new Error("Failed pattern match at Model (line 663, column 43 - line 673, column 47): " + [ v.value0.dangling.constructor.name ]);
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          throw new Error("Failed pattern match at Model (line 662, column 27 - line 674, column 23): " + [ v.constructor.name ]);
      };
  };
  exports["RightRepeat"] = RightRepeat;
  exports["RightNeighbor"] = RightNeighbor;
  exports["LeftRepeat"] = LeftRepeat;
  exports["LeftNeighbor"] = LeftNeighbor;
  exports["FullNeighbor"] = FullNeighbor;
  exports["FullRepeat"] = FullRepeat;
  exports["LeftRepeatOfRight"] = LeftRepeatOfRight;
  exports["RightRepeatOfLeft"] = RightRepeatOfLeft;
  exports["PassingMid"] = PassingMid;
  exports["PassingLeft"] = PassingLeft;
  exports["PassingRight"] = PassingRight;
  exports["NoExpl"] = NoExpl;
  exports["RootExpl"] = RootExpl;
  exports["HoriExpl"] = HoriExpl;
  exports["RightExpl"] = RightExpl;
  exports["LeftExpl"] = LeftExpl;
  exports["DoubleExpl"] = DoubleExpl;
  exports["findLeftOrn"] = findLeftOrn;
  exports["findRightOrn"] = findRightOrn;
  exports["findDoubleOrn"] = findDoubleOrn;
  exports["setLeftExplParent"] = setLeftExplParent;
  exports["setRightExplParent"] = setRightExplParent;
  exports["setHoriExplParent"] = setHoriExplParent;
  exports["explHasParent"] = explHasParent;
  exports["Inner"] = Inner;
  exports["isRepeatingEdge"] = isRepeatingEdge;
  exports["NoParents"] = NoParents;
  exports["VertParent"] = VertParent;
  exports["MergeParents"] = MergeParents;
  exports["getParents"] = getParents;
  exports["getInnerNotes"] = getInnerNotes;
  exports["transEdges"] = transEdges;
  exports["Freeze"] = Freeze;
  exports["Split"] = Split;
  exports["Hori"] = Hori;
  exports["attachSegment"] = attachSegment;
  exports["showReduction"] = showReduction;
  exports["loadPiece"] = loadPiece;
  exports["mergeAtSlice"] = mergeAtSlice;
  exports["vertAtMid"] = vertAtMid;
  exports["undoMergeAtTrans"] = undoMergeAtTrans;
  exports["undoVertAtSlice"] = undoVertAtSlice;
  exports["noteSetExplanation"] = noteSetExplanation;
  exports["eqRightOrnament"] = eqRightOrnament;
  exports["showRightOrnament"] = showRightOrnament;
  exports["eqLeftOrnament"] = eqLeftOrnament;
  exports["showLeftOrnament"] = showLeftOrnament;
  exports["eqDoubleOrnament"] = eqDoubleOrnament;
  exports["showDoubleOrnament"] = showDoubleOrnament;
  exports["eqNoteExplanation"] = eqNoteExplanation;
  exports["showNoteExplanation"] = showNoteExplanation;
  exports["ordStartStop"] = ordStartStop;
  exports["showStartStop"] = showStartStop;
  exports["showSliceId"] = showSliceId;
  exports["eqSliceId"] = eqSliceId;
  exports["ordSliceId"] = ordSliceId;
  exports["showTransId"] = showTransId;
  exports["eqTransId"] = eqTransId;
  exports["ordTransId"] = ordTransId;
  exports["eqParents"] = eqParents;
  exports["showParents"] = showParents;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["CommonApp"] = $PS["CommonApp"] || {};
  var exports = $PS["CommonApp"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Pitches_Class = $PS["Data.Pitches.Class"];
  var Data_Pitches_Spelled = $PS["Data.Pitches.Spelled"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Model = $PS["Model"];                
  var SelNone = (function () {
      function SelNone() {

      };
      SelNone.value = new SelNone();
      return SelNone;
  })();
  var SelSlice = (function () {
      function SelSlice(value0) {
          this.value0 = value0;
      };
      SelSlice.create = function (value0) {
          return new SelSlice(value0);
      };
      return SelSlice;
  })();
  var SelTrans = (function () {
      function SelTrans(value0) {
          this.value0 = value0;
      };
      SelTrans.create = function (value0) {
          return new SelTrans(value0);
      };
      return SelTrans;
  })();
  var SelNote = (function () {
      function SelNote(value0) {
          this.value0 = value0;
      };
      SelNote.create = function (value0) {
          return new SelNote(value0);
      };
      return SelNote;
  })();
  var NoOp = (function () {
      function NoOp() {

      };
      NoOp.value = new NoOp();
      return NoOp;
  })();
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var HandleKey = (function () {
      function HandleKey(value0) {
          this.value0 = value0;
      };
      HandleKey.create = function (value0) {
          return new HandleKey(value0);
      };
      return HandleKey;
  })();
  var Select = (function () {
      function Select(value0) {
          this.value0 = value0;
      };
      Select.create = function (value0) {
          return new Select(value0);
      };
      return Select;
  })();
  var LoadPiece = (function () {
      function LoadPiece(value0) {
          this.value0 = value0;
      };
      LoadPiece.create = function (value0) {
          return new LoadPiece(value0);
      };
      return LoadPiece;
  })();
  var MergeAtSelected = (function () {
      function MergeAtSelected() {

      };
      MergeAtSelected.value = new MergeAtSelected();
      return MergeAtSelected;
  })();
  var VertAtSelected = (function () {
      function VertAtSelected() {

      };
      VertAtSelected.value = new VertAtSelected();
      return VertAtSelected;
  })();
  var UnMergeAtSelected = (function () {
      function UnMergeAtSelected() {

      };
      UnMergeAtSelected.value = new UnMergeAtSelected();
      return UnMergeAtSelected;
  })();
  var UnVertAtSelected = (function () {
      function UnVertAtSelected() {

      };
      UnVertAtSelected.value = new UnVertAtSelected();
      return UnVertAtSelected;
  })();
  var CombineAny = (function () {
      function CombineAny() {

      };
      CombineAny.value = new CombineAny();
      return CombineAny;
  })();
  var RemoveAny = (function () {
      function RemoveAny() {

      };
      RemoveAny.value = new RemoveAny();
      return RemoveAny;
  })();
  var SetNoteExplanation = (function () {
      function SetNoteExplanation(value0) {
          this.value0 = value0;
      };
      SetNoteExplanation.create = function (value0) {
          return new SetNoteExplanation(value0);
      };
      return SetNoteExplanation;
  })();
  var removeParent = function (note) {
      return function (expl) {
          return function (setParent) {
              var mkAction = function (e$prime) {
                  return new SetNoteExplanation({
                      noteId: note.id,
                      expl: e$prime
                  });
              };
              return Data_Maybe.maybe(NoOp.value)(mkAction)(setParent(note.pitch)(Data_Maybe.Nothing.value)(expl));
          };
      };
  };
  var outerSelected = function (v) {
      if (v instanceof SelSlice) {
          return true;
      };
      if (v instanceof SelTrans) {
          return true;
      };
      return false;
  };
  var noteIsSelected = function (v) {
      return function (v1) {
          if (v instanceof SelNote && v1 instanceof Model.Inner) {
              return v.value0.note.id === v1.value0.id;
          };
          return false;
      };
  };
  var getSelTrans = function (v) {
      if (v instanceof SelTrans) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getSelSlice = function (v) {
      if (v instanceof SelSlice) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var genericOuterSelection = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SelNone) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof SelSlice) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof SelTrans) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof SelNote) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
      };
      throw new Error("Failed pattern match at CommonApp (line 19, column 1 - line 19, column 61): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return SelNone.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new SelSlice(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new SelTrans(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return new SelNote(x.value0.value0.value0);
      };
      throw new Error("Failed pattern match at CommonApp (line 19, column 1 - line 19, column 61): " + [ x.constructor.name ]);
  });
  var showOuterSelection = new Data_Show.Show(function (os) {
      return Data_Show_Generic.genericShow(genericOuterSelection)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
          return "SelNone";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Model.showSliceId))(new Data_Symbol.IsSymbol(function () {
          return "SelSlice";
      })))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Model.showTransId))(new Data_Symbol.IsSymbol(function () {
          return "SelTrans";
      })))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "expl";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "note";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "parents";
      }))(Data_Show.showRecordFieldsNil)(Model.showParents(Model.showSliceId)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pitch";
      }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(Model.showNoteExplanation))))(new Data_Symbol.IsSymbol(function () {
          return "SelNote";
      }))))))(os);
  });
  var eqOuterSelection = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SelNone && y instanceof SelNone) {
              return true;
          };
          if (x instanceof SelSlice && y instanceof SelSlice) {
              return Data_Eq.eq(Model.eqSliceId)(x.value0)(y.value0);
          };
          if (x instanceof SelTrans && y instanceof SelTrans) {
              return Data_Eq.eq(Model.eqTransId)(x.value0)(y.value0);
          };
          if (x instanceof SelNote && y instanceof SelNote) {
              return Data_Eq.eq(Model.eqNoteExplanation)(x.value0.expl)(y.value0.expl) && (x.value0.note.id === y.value0.note.id && Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(x.value0.note.pitch)(y.value0.note.pitch)) && Data_Eq.eq(Model.eqParents(Model.eqSliceId))(x.value0.parents)(y.value0.parents);
          };
          return false;
      };
  });
  var addParentToNote = function (sel) {
      return function (sliceId) {
          return function (parNote) {
              var v = function (v1) {
                  if (Data_Boolean.otherwise) {
                      return NoOp.value;
                  };
                  throw new Error("Failed pattern match at CommonApp (line 60, column 1 - line 60, column 63): " + [ sel.constructor.name, sliceId.constructor.name, parNote.constructor.name ]);
              };
              if (sel instanceof SelNote) {
                  var setExpl = function (e) {
                      return new SetNoteExplanation({
                          noteId: sel.value0.note.id,
                          expl: e
                      });
                  };
                  var v1 = function (v2) {
                      var v3 = function (v4) {
                          if (sel.value0.parents instanceof Model.MergeParents && Data_Boolean.otherwise) {
                              return NoOp.value;
                          };
                          var v5 = function (v6) {
                              if (sel.value0.parents instanceof Model.VertParent && Data_Boolean.otherwise) {
                                  return NoOp.value;
                              };
                              if (sel.value0.parents instanceof Model.NoParents) {
                                  return NoOp.value;
                              };
                              throw new Error("Failed pattern match at CommonApp (line 60, column 1 - line 60, column 63): " + [ sel.value0.parents.constructor.name ]);
                          };
                          if (sel.value0.parents instanceof Model.VertParent) {
                              var $81 = Data_Eq.eq(Model.eqSliceId)(sliceId)(sel.value0.parents.value0);
                              if ($81) {
                                  var $82 = Model.setHoriExplParent(sel.value0.note.pitch)(new Data_Maybe.Just(parNote))(sel.value0.expl);
                                  if ($82 instanceof Data_Maybe.Just) {
                                      return setExpl($82.value0);
                                  };
                                  return v5(true);
                              };
                              return v5(true);
                          };
                          return v5(true);
                      };
                      if (sel.value0.parents instanceof Model.MergeParents) {
                          var $86 = Data_Eq.eq(Model.eqSliceId)(sliceId)(sel.value0.parents.value0.right);
                          if ($86) {
                              var $87 = Model.setRightExplParent(sel.value0.note.pitch)(new Data_Maybe.Just(parNote))(sel.value0.expl);
                              if ($87 instanceof Data_Maybe.Just) {
                                  return setExpl($87.value0);
                              };
                              return v3(true);
                          };
                          return v3(true);
                      };
                      return v3(true);
                  };
                  if (sel.value0.parents instanceof Model.MergeParents) {
                      var $93 = Data_Eq.eq(Model.eqSliceId)(sliceId)(sel.value0.parents.value0.left);
                      if ($93) {
                          var $94 = Model.setLeftExplParent(sel.value0.note.pitch)(new Data_Maybe.Just(parNote))(sel.value0.expl);
                          if ($94 instanceof Data_Maybe.Just) {
                              return setExpl($94.value0);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  return v1(true);
              };
              return v(true);
          };
      };
  };
  exports["SelNone"] = SelNone;
  exports["SelSlice"] = SelSlice;
  exports["SelTrans"] = SelTrans;
  exports["SelNote"] = SelNote;
  exports["getSelSlice"] = getSelSlice;
  exports["getSelTrans"] = getSelTrans;
  exports["noteIsSelected"] = noteIsSelected;
  exports["outerSelected"] = outerSelected;
  exports["addParentToNote"] = addParentToNote;
  exports["removeParent"] = removeParent;
  exports["NoOp"] = NoOp;
  exports["Init"] = Init;
  exports["HandleKey"] = HandleKey;
  exports["Select"] = Select;
  exports["LoadPiece"] = LoadPiece;
  exports["MergeAtSelected"] = MergeAtSelected;
  exports["VertAtSelected"] = VertAtSelected;
  exports["UnMergeAtSelected"] = UnMergeAtSelected;
  exports["UnVertAtSelected"] = UnVertAtSelected;
  exports["CombineAny"] = CombineAny;
  exports["RemoveAny"] = RemoveAny;
  exports["SetNoteExplanation"] = SetNoteExplanation;
  exports["eqOuterSelection"] = eqOuterSelection;
  exports["showOuterSelection"] = showOuterSelection;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Applicative.Free"] = $PS["Control.Applicative.Free"] || {};
  var exports = $PS["Control.Applicative.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Ap = (function () {
      function Ap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ap.create = function (value0) {
          return function (value1) {
              return new Ap(value0, value1);
          };
      };
      return Ap;
  })();
  var mkAp = function (fba) {
      return function (fb) {
          return new Ap(fba, fb);
      };
  };
  var liftFreeAp = Lift.create;
  var goLeft = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_valStack) {
              return function ($copy_nat) {
                  return function ($copy_func) {
                      return function ($copy_count) {
                          var $tco_var_dictApplicative = $copy_dictApplicative;
                          var $tco_var_fStack = $copy_fStack;
                          var $tco_var_valStack = $copy_valStack;
                          var $tco_var_nat = $copy_nat;
                          var $tco_var_func = $copy_func;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                              if (func instanceof Pure) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: Control_Applicative.pure(dictApplicative)(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Lift) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: nat(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Ap) {
                                  $tco_var_dictApplicative = dictApplicative;
                                  $tco_var_fStack = fStack;
                                  $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                  $tco_var_nat = nat;
                                  $tco_var_func = func.value0;
                                  $copy_count = count + 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                          };
                          return $tco_result;
                      };
                  };
              };
          };
      };
  };
  var goApply = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_vals) {
              return function ($copy_gVal) {
                  var $tco_var_dictApplicative = $copy_dictApplicative;
                  var $tco_var_fStack = $copy_fStack;
                  var $tco_var_vals = $copy_vals;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictApplicative, fStack, vals, gVal) {
                      if (fStack instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return new Data_Either.Left(gVal);
                      };
                      if (fStack instanceof Data_List_Types.Cons) {
                          var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                          var $14 = fStack.value0.count === 1;
                          if ($14) {
                              if (fStack.value1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return new Data_Either.Left(gRes);
                              };
                              $tco_var_dictApplicative = dictApplicative;
                              $tco_var_fStack = fStack.value1;
                              $tco_var_vals = vals;
                              $copy_gVal = gRes;
                              return;
                          };
                          if (vals instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Data_Either.Left(gRes);
                          };
                          if (vals instanceof Data_List_Types.Cons) {
                              $tco_done = true;
                              return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                  func: gRes,
                                  count: fStack.value0.count - 1 | 0
                              }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var functorFreeAp = new Data_Functor.Functor(function (f) {
      return function (x) {
          return mkAp(new Pure(f))(x);
      };
  });
  var foldFreeAp = function (dictApplicative) {
      return function (nat) {
          return function (z) {
              var go = function ($copy_v) {
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v) {
                      if (v.value1.value0 instanceof Pure) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Lift) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Ap) {
                          var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                          $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                          return;
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [ v.value1.value0.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($copy_v);
                  };
                  return $tco_result;
              };
              return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
          };
      };
  };
  var retractFreeAp = function (dictApplicative) {
      return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyFreeAp = new Control_Apply.Apply(function () {
      return functorFreeAp;
  }, function (fba) {
      return function (fb) {
          return mkAp(fba)(fb);
      };
  });
  var applicativeFreeAp = new Control_Applicative.Applicative(function () {
      return applyFreeAp;
  }, Pure.create);
  var hoistFreeAp = function (f) {
      return foldFreeAp(applicativeFreeAp)(function ($37) {
          return liftFreeAp(f($37));
      });
  };
  exports["retractFreeAp"] = retractFreeAp;
  exports["hoistFreeAp"] = hoistFreeAp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];       
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign["_fork"](false);
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };   
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);                                  
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (res) {
              if (res instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(res.value0);
              };
              if (res instanceof Control_Monad_Rec_Class.Loop) {
                  return go(res.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [ res.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["finally"] = $$finally;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Fork.Class"] = $PS["Control.Monad.Fork.Class"] || {};
  var exports = $PS["Control.Monad.Fork.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
      this.Functor1 = Functor1;
      this.Monad0 = Monad0;
      this.fork = fork;
      this.join = join;
      this.suspend = suspend;
  };
  var monadForkAff = new MonadFork(function () {
      return Effect_Aff.functorFiber;
  }, function () {
      return Effect_Aff.monadAff;
  }, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
  var fork = function (dict) {
      return dict.fork;
  };
  exports["fork"] = fork;
  exports["monadForkAff"] = monadForkAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done1 = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($136) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($136));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  exports["execState"] = execState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Coyoneda"] = $PS["Data.Coyoneda"] || {};
  var exports = $PS["Data.Coyoneda"];
  var Control_Category = $PS["Control.Category"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];                        
  var CoyonedaF = (function () {
      function CoyonedaF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CoyonedaF.create = function (value0) {
          return function (value1) {
              return new CoyonedaF(value0, value1);
          };
      };
      return CoyonedaF;
  })();
  var Coyoneda = function (x) {
      return x;
  };
  var unCoyoneda = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1);
          })(v);
      };
  };
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
      };
  };
  var functorCoyoneda = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(function ($84) {
                  return f(v1.value0($84));
              })(v1.value1);
          })(v);
      };
  });
  var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
  exports["unCoyoneda"] = unCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var semigroupSet = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  var monoidSet = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupSet(dictOrd);
      }, empty);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["member"] = member;
  exports["monoidSet"] = monoidSet;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Folding"] = $PS["Folding"] || {};
  var exports = $PS["Folding"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Model = $PS["Model"];                
  var withLeftId = function (id) {
      return function (action) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v) {
              return v.leftId;
          }))(function (oldid) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                  var $29 = {};
                  for (var $30 in st) {
                      if ({}.hasOwnProperty.call(st, $30)) {
                          $29[$30] = st[$30];
                      };
                  };
                  $29.leftId = id;
                  return $29;
              }))(function () {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(action)(function (res) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                          var $32 = {};
                          for (var $33 in st) {
                              if ({}.hasOwnProperty.call(st, $33)) {
                                  $32[$33] = st[$33];
                              };
                          };
                          $32.leftId = oldid;
                          return $32;
                      }))(function () {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(res);
                      });
                  });
              });
          });
      };
  };
  var nothingMore = function (seg) {
      return {
          seg: seg,
          more: Data_Unit.unit
      };
  };
  var foldAgenda = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Unit.unit);
          };
          if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
              if (v1.value0.seg.op instanceof Model.Freeze) {
                  return v.freezeOnly(v1.value0);
              };
              if (v1.value0.seg.op instanceof Model.Split) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(v.splitOnly(v1.value0)(v1.value0.seg.op.value0))(function (children) {
                      return foldAgenda(v)(children);
                  });
              };
              if (v1.value0.seg.op instanceof Model.Hori) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Folding (line 45, column 3 - line 50, column 24): " + [ v1.value0.seg.op.constructor.name ]);
          };
          if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Cons) {
              if (v1.value0.seg.op instanceof Model.Freeze) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(v.freezeLeft(v1.value0))(function () {
                      return foldAgenda(v)(v1.value1);
                  });
              };
              if (v1.value0.seg.op instanceof Model.Split) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(v.splitLeft(v1.value0)(v1.value0.seg.op.value0))(function (children) {
                      return foldAgenda(v)(Data_Semigroup.append(Data_List_Types.semigroupList)(children)(v1.value1));
                  });
              };
              if (v1.value0.seg.op instanceof Model.Hori) {
                  if (v1.value1.value0.seg.op instanceof Model.Split) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(v.splitRight(v1.value0)(v1.value1.value0)(v1.value1.value0.seg.op.value0))(function (children) {
                          return foldAgenda(v)(Data_Semigroup.append(Data_List_Types.semigroupList)(new Data_List_Types.Cons(v1.value0, children))(v1.value1.value1));
                      });
                  };
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(v.hori(v1.value0)(v1.value1.value0)(v1.value0.seg.op.value0))(function (children) {
                      return foldAgenda(v)(Data_Semigroup.append(Data_List_Types.semigroupList)(children)(v1.value1.value1));
                  });
              };
              throw new Error("Failed pattern match at Folding (line 54, column 3 - line 71, column 45): " + [ v1.value0.seg.op.constructor.name ]);
          };
          throw new Error("Failed pattern match at Folding (line 36, column 1 - line 39, column 41): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var walkGraph = function (alg) {
      return function (start) {
          return function (agenda) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(alg.init(start))(function () {
                  return foldAgenda(alg)(agenda);
              });
          };
      };
  };
  var addHoriEdge = function (v) {
      return function (v1) {
          return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
              var $76 = {};
              for (var $77 in st) {
                  if ({}.hasOwnProperty.call(st, $77)) {
                      $76[$77] = st[$77];
                  };
              };
              $76.horis = new Data_List_Types.Cons({
                  child: v.id,
                  parent: v1.id
              }, st.horis);
              return $76;
          });
      };
  };
  var addGraphTrans = function (v) {
      return function (ir) {
          var trans = function (il) {
              return {
                  left: il,
                  right: ir,
                  id: v.id,
                  edges: v.edges
              };
          };
          var add = function (st) {
              var $83 = {};
              for (var $84 in st) {
                  if ({}.hasOwnProperty.call(st, $84)) {
                      $83[$84] = st[$84];
                  };
              };
              $83.transitions = Data_Map_Internal.insert(Model.ordTransId)(v.id)(trans(st.leftId))(st.transitions);
              return $83;
          };
          return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(add);
      };
  };
  var addGraphSlice = function (slice) {
      return function (depth) {
          var gslice = {
              depth: depth,
              slice: slice
          };
          var add = function (st) {
              var $88 = {};
              for (var $89 in st) {
                  if ({}.hasOwnProperty.call(st, $89)) {
                      $88[$89] = st[$89];
                  };
              };
              $88.maxd = Data_Ord.max(Data_Ord.ordNumber)(depth)(st.maxd);
              $88.maxx = Data_Ord.max(Data_Ord.ordNumber)(slice.x)(st.maxx);
              $88.slices = Data_Map_Internal.insert(Model.ordSliceId)(slice.id)(gslice)(st.slices);
              return $88;
          };
          return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(add);
      };
  };
  var graphAlg = (function () {
      var splitTrans = function (item) {
          return function (split) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v) {
                  return v.currentDepth;
              }))(function (currentDepth) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addGraphTrans(item.seg.trans)(item.seg.rslice.id))(function () {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_List_Types.Cons({
                          seg: split.childl,
                          more: {
                              rdepth: Data_Ord.max(Data_Ord.ordNumber)(currentDepth)(item.more.rdepth) + 1.0
                          }
                      }, new Data_List_Types.Cons({
                          seg: Model.attachSegment(split.childr)(item.seg.rslice),
                          more: {
                              rdepth: item.more.rdepth
                          }
                      }, Data_List_Types.Nil.value)));
                  });
              });
          };
      };
      var splitRight = function (left) {
          return function (right) {
              return function (split) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(withLeftId(left.seg.rslice.id)(addGraphTrans(right.seg.trans)(right.seg.rslice.id)))(function () {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_List_Types.Cons({
                          seg: split.childl,
                          more: {
                              rdepth: Data_Ord.max(Data_Ord.ordNumber)(left.more.rdepth)(right.more.rdepth) + 1.0
                          }
                      }, new Data_List_Types.Cons({
                          seg: Model.attachSegment(split.childr)(right.seg.rslice),
                          more: {
                              rdepth: right.more.rdepth
                          }
                      }, Data_List_Types.Nil.value)));
                  });
              };
          };
      };
      var init = function (start) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addGraphSlice(start)(0.0))(function () {
              return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                  var $91 = {};
                  for (var $92 in st) {
                      if ({}.hasOwnProperty.call(st, $92)) {
                          $91[$92] = st[$92];
                      };
                  };
                  $91.leftId = start.id;
                  return $91;
              });
          });
      };
      var hori = function (left) {
          return function (right) {
              return function (v) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v1) {
                      return v1.currentDepth;
                  }))(function (currentDepth) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addGraphTrans(left.seg.trans)(left.seg.rslice.id))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addGraphSlice(left.seg.rslice)(left.more.rdepth))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addHoriEdge(v.childl.rslice)(left.seg.rslice))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addHoriEdge(v.childm.rslice)(left.seg.rslice))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(withLeftId(left.seg.rslice.id)(addGraphTrans(right.seg.trans)(right.seg.rslice.id)))(function () {
                                          var dsub = Data_Ord.max(Data_Ord.ordNumber)(currentDepth)(Data_Ord.max(Data_Ord.ordNumber)(left.more.rdepth)(right.more.rdepth)) + 1.0;
                                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_List_Types.Cons({
                                              seg: v.childl,
                                              more: {
                                                  rdepth: dsub
                                              }
                                          }, new Data_List_Types.Cons({
                                              seg: v.childm,
                                              more: {
                                                  rdepth: dsub
                                              }
                                          }, new Data_List_Types.Cons({
                                              seg: Model.attachSegment(v.childr)(right.seg.rslice),
                                              more: {
                                                  rdepth: right.more.rdepth
                                              }
                                          }, Data_List_Types.Nil.value))));
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
      var freezeTrans = function (left) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addGraphTrans(left.seg.trans)(left.seg.rslice.id))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(addGraphSlice(left.seg.rslice)(left.more.rdepth))(function () {
                  return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                      var $100 = {};
                      for (var $101 in st) {
                          if ({}.hasOwnProperty.call(st, $101)) {
                              $100[$101] = st[$101];
                          };
                      };
                      $100.currentDepth = left.more.rdepth;
                      $100.leftId = left.seg.rslice.id;
                      return $100;
                  });
              });
          });
      };
      return {
          init: init,
          freezeOnly: freezeTrans,
          freezeLeft: freezeTrans,
          splitOnly: splitTrans,
          splitLeft: splitTrans,
          splitRight: splitRight,
          hori: hori
      };
  })();
  var evalGraph = function (reduction) {
      var initState = {
          slices: Data_Map_Internal.empty,
          transitions: Data_Map_Internal.empty,
          horis: Data_List_Types.Nil.value,
          maxd: 0.0,
          maxx: 0.0,
          currentDepth: 0.0,
          leftId: 0
      };
      var agenda = Data_Functor.map(Data_List_Types.functorList)(function (seg) {
          return {
              seg: seg,
              more: {
                  rdepth: 0.0
              }
          };
      })(reduction.segments);
      return Data_Function.flip(Control_Monad_State.execState)(initState)(walkGraph(graphAlg)(reduction.start)(agenda));
  };
  exports["walkGraph"] = walkGraph;
  exports["evalGraph"] = evalGraph;
  exports["nothingMore"] = nothingMore;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  "use strict";

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["lookup"] = lookup;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Data.Slot"] = $PS["Halogen.Data.Slot"] || {};
  var exports = $PS["Halogen.Data.Slot"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var foreachSlot = function (dictApplicative) {
      return function (v) {
          return function (k) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                  return k($37);
              })(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["foreachSlot"] = foreachSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Aff.Driver.State"] = $PS["Halogen.Aff.Driver.State"] || {};
  var exports = $PS["Halogen.Aff.Driver.State"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX_ = function (dictApplicative) {
      return function (f) {
          return unDriverStateX(function (st) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
          });
      };
  };
  var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX = function (dictFunctor) {
      return function (f) {
          return unDriverStateX(function (st) {
              return mkRenderStateX(f(st.rendering));
          });
      };
  };
  var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
  var mapDriverState = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var initDriverState = function (component) {
      return function (input) {
          return function (handler) {
              return function (lchs) {
                  return function __do() {
                      var selfRef = Effect_Ref["new"]({})();
                      var childrenIn = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var childrenOut = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var handlerRef = Effect_Ref["new"](handler)();
                      var pendingQueries = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingOuts = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingHandlers = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var fresh = Effect_Ref["new"](1)();
                      var subscriptions = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                      var forks = Effect_Ref["new"](Data_Map_Internal.empty)();
                      var ds = {
                          component: component,
                          state: component.initialState(input),
                          refs: Data_Map_Internal.empty,
                          children: Halogen_Data_Slot.empty,
                          childrenIn: childrenIn,
                          childrenOut: childrenOut,
                          selfRef: selfRef,
                          handlerRef: handlerRef,
                          pendingQueries: pendingQueries,
                          pendingOuts: pendingOuts,
                          pendingHandlers: pendingHandlers,
                          rendering: Data_Maybe.Nothing.value,
                          fresh: fresh,
                          subscriptions: subscriptions,
                          forks: forks,
                          lifecycleHandlers: lchs
                      };
                      Effect_Ref.write(ds)(selfRef)();
                      return mkDriverStateXRef(selfRef);
                  };
              };
          };
      };
  };
  exports["mapDriverState"] = mapDriverState;
  exports["unDriverStateX"] = unDriverStateX;
  exports["renderStateX"] = renderStateX;
  exports["renderStateX_"] = renderStateX_;
  exports["unRenderStateX"] = unRenderStateX;
  exports["initDriverState"] = initDriverState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Query.ChildQuery"] = $PS["Halogen.Query.ChildQuery"] || {};
  var exports = $PS["Halogen.Query.ChildQuery"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
  exports["unChildQueryBox"] = unChildQueryBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Query.HalogenM"] = $PS["Halogen.Query.HalogenM"] || {};
  var exports = $PS["Halogen.Query.HalogenM"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];                                
  var SubscriptionId = function (x) {
      return x;
  };
  var ForkId = function (x) {
      return x;
  };
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Unsubscribe = (function () {
      function Unsubscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unsubscribe.create = function (value0) {
          return function (value1) {
              return new Unsubscribe(value0, value1);
          };
      };
      return Unsubscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0) {
          this.value0 = value0;
      };
      ChildQuery.create = function (value0) {
          return new ChildQuery(value0);
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fork.create = function (value0) {
          return function (value1) {
              return new Fork(value0, value1);
          };
      };
      return Fork;
  })();
  var Kill = (function () {
      function Kill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Kill.create = function (value0) {
          return function (value1) {
              return new Kill(value0, value1);
          };
      };
      return Kill;
  })();
  var GetRef = (function () {
      function GetRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GetRef.create = function (value0) {
          return function (value1) {
              return new GetRef(value0, value1);
          };
      };
      return GetRef;
  })();
  var HalogenM = function (x) {
      return x;
  };
  var subscribe$prime = function (esc) {
      return HalogenM(Control_Monad_Free.liftF(new Subscribe(esc, Data_Function["const"](Data_Unit.unit))));
  };
  var ordSubscriptionId = Data_Ord.ordInt;
  var ordForkId = Data_Ord.ordInt;
  var monadHalogenM = Control_Monad_Free.freeMonad;
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($136) {
      return HalogenM(Control_Monad_Free.liftF(State.create($136)));
  });
  var monadEffectHalogenM = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadHalogenM;
      }, (function () {
          var $141 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($142) {
              return HalogenM(Control_Monad_Free.liftF(Lift.create($141($142))));
          };
      })());
  };
  var functorHalogenM = Control_Monad_Free.freeFunctor;
  var bindHalogenM = Control_Monad_Free.freeBind;
  var applyHalogenM = Control_Monad_Free.freeApply;         
  var applicativeHalogenM = Control_Monad_Free.freeApplicative;
  exports["State"] = State;
  exports["Subscribe"] = Subscribe;
  exports["Unsubscribe"] = Unsubscribe;
  exports["Lift"] = Lift;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["Kill"] = Kill;
  exports["GetRef"] = GetRef;
  exports["SubscriptionId"] = SubscriptionId;
  exports["subscribe'"] = subscribe$prime;
  exports["ForkId"] = ForkId;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applyHalogenM"] = applyHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadEffectHalogenM"] = monadEffectHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
  exports["ordSubscriptionId"] = ordSubscriptionId;
  exports["ordForkId"] = ordForkId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Query.HalogenQ"] = $PS["Halogen.Query.HalogenQ"] || {};
  var exports = $PS["Halogen.Query.HalogenQ"];           
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize(value0) {
          this.value0 = value0;
      };
      Finalize.create = function (value0) {
          return new Finalize(value0);
      };
      return Finalize;
  })();
  var Receive = (function () {
      function Receive(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Receive.create = function (value0) {
          return function (value1) {
              return new Receive(value0, value1);
          };
      };
      return Receive;
  })();
  var Action = (function () {
      function Action(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Action.create = function (value0) {
          return function (value1) {
              return new Action(value0, value1);
          };
      };
      return Action;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  exports["Initialize"] = Initialize;
  exports["Finalize"] = Finalize;
  exports["Receive"] = Receive;
  exports["Action"] = Action;
  exports["Query"] = Query;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Query.Input"] = $PS["Halogen.Query.Input"] || {};
  var exports = $PS["Halogen.Query.Input"];
  var RefUpdate = (function () {
      function RefUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RefUpdate.create = function (value0) {
          return function (value1) {
              return new RefUpdate(value0, value1);
          };
      };
      return RefUpdate;
  })();
  var Action = (function () {
      function Action(value0) {
          this.value0 = value0;
      };
      Action.create = function (value0) {
          return new Action(value0);
      };
      return Action;
  })();
  exports["RefUpdate"] = RefUpdate;
  exports["Action"] = Action;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Subscription"] = $PS["Halogen.Subscription"] || {};
  var exports = $PS["Halogen.Subscription"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var unsubscribe = function (v) {
      return v;
  };
  var subscribe = function (v) {
      return function (k) {
          return v((function () {
              var $55 = Data_Functor["void"](Effect.functorEffect);
              return function ($56) {
                  return $55(k($56));
              };
          })());
      };
  };                                                                               
  var notify = function (v) {
      return function (a) {
          return v(a);
      };
  };                                                                   
  var makeEmitter = Safe_Coerce.coerce();
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          emitter: function (k) {
              return function __do() {
                  Effect_Ref.modify_(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return Effect_Ref.modify_(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers);
              };
          },
          listener: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  exports["create"] = create;
  exports["notify"] = notify;
  exports["makeEmitter"] = makeEmitter;
  exports["subscribe"] = subscribe;
  exports["unsubscribe"] = unsubscribe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Aff.Driver.Eval"] = $PS["Halogen.Aff.Driver.Eval"] || {};
  var exports = $PS["Halogen.Aff.Driver.Eval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Applicative_Free = $PS["Control.Applicative.Free"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Query_ChildQuery = $PS["Halogen.Query.ChildQuery"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var unsubscribe = function (sid) {
      return function (ref) {
          return function __do() {
              var v = Effect_Ref.read(ref)();
              var subs = Effect_Ref.read(v.subscriptions)();
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Halogen_Subscription.unsubscribe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))();
          };
      };
  };
  var queueOrRun = function (ref) {
      return function (au) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return au;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 182, column 33 - line 184, column 57): " + [ v.constructor.name ]);
          });
      };
  };
  var handleLifecycle = function (lchs) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
              initializers: Data_List_Types.Nil.value,
              finalizers: Data_List_Types.Nil.value
          })(lchs)))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (result) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v.finalizers))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v.initializers))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
                          });
                      });
                  });
              });
          });
      };
  };
  var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var fresh = function (f) {
      return function (ref) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                  return {
                      state: i + 1 | 0,
                      value: f(i)
                  };
              })(v.fresh));
          });
      };
  };
  var evalQ = function (render) {
      return function (ref) {
          return function (q) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                  return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
              });
          };
      };
  };
  var evalM = function (render) {
      return function (initRef) {
          return function (v) {
              var evalChildQuery = function (ref) {
                  return function (cqb) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                          return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                              var evalChild = function (v3) {
                                  return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (dsx) {
                                      return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                          return evalQ(render)(ds.selfRef)(v2.value1);
                                      })(dsx);
                                  }));
                              };
                              return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                          })(cqb);
                      });
                  };
              };
              var go = function (ref) {
                  return function (v1) {
                      if (v1 instanceof Halogen_Query_HalogenM.State) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              var v3 = v1.value0(v2.state);
                              if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                              };
                              if (Data_Boolean.otherwise) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                      component: v2.component,
                                      state: v3.value1,
                                      refs: v2.refs,
                                      children: v2.children,
                                      childrenIn: v2.childrenIn,
                                      childrenOut: v2.childrenOut,
                                      selfRef: v2.selfRef,
                                      handlerRef: v2.handlerRef,
                                      pendingQueries: v2.pendingQueries,
                                      pendingOuts: v2.pendingOuts,
                                      pendingHandlers: v2.pendingHandlers,
                                      rendering: v2.rendering,
                                      fresh: v2.fresh,
                                      subscriptions: v2.subscriptions,
                                      forks: v2.forks,
                                      lifecycleHandlers: v2.lifecycleHandlers
                                  })(ref)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 86, column 7 - line 92, column 21): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (sid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Halogen_Subscription.subscribe(v1.value0(sid))(function (act) {
                                  return handleAff(evalF(render)(ref)(new Halogen_Query_Input.Action(act)));
                              })))(function (finalize) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(sid)(finalize)))(v2.subscriptions)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(sid));
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(unsubscribe(v1.value0)(ref)))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                          return v1.value0;
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                          return evalChildQuery(ref)(v1.value0);
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (handler) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(handler(v1.value0)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Par) {
                          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp((function () {
                              var $79 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
                              var $80 = evalM(render)(ref);
                              return function ($81) {
                                  return $79($80($81));
                              };
                          })())(v1.value0)));
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (fid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (doneRef) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                          Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(fid))(v2.forks)();
                                          return Effect_Ref.write(true)(doneRef)();
                                      }))(evalM(render)(ref)(v1.value0))))(function (fiber) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(doneRef))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(fid)(fiber))(v2.forks))))(function () {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(fid));
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (forkMap) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(forkMap)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                          });
                      };
                      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 83, column 12 - line 133, column 33): " + [ v1.constructor.name ]);
                  };
              };
              return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
          };
      };
  };
  var evalF = function (render) {
      return function (ref) {
          return function (v) {
              if (v instanceof Halogen_Query_Input.RefUpdate) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                      return {
                          component: st.component,
                          state: st.state,
                          refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                          children: st.children,
                          childrenIn: st.childrenIn,
                          childrenOut: st.childrenOut,
                          selfRef: st.selfRef,
                          handlerRef: st.handlerRef,
                          pendingQueries: st.pendingQueries,
                          pendingOuts: st.pendingOuts,
                          pendingHandlers: st.pendingHandlers,
                          rendering: st.rendering,
                          fresh: st.fresh,
                          subscriptions: st.subscriptions,
                          forks: st.forks,
                          lifecycleHandlers: st.lifecycleHandlers
                      };
                  })));
              };
              if (v instanceof Halogen_Query_Input.Action) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                      return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                  });
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 52, column 20 - line 58, column 62): " + [ v.constructor.name ]);
          };
      };
  };
  exports["evalF"] = evalF;
  exports["evalQ"] = evalQ;
  exports["evalM"] = evalM;
  exports["handleLifecycle"] = handleLifecycle;
  exports["queueOrRun"] = queueOrRun;
  exports["handleAff"] = handleAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Component"] = $PS["Halogen.Component"] || {};
  var exports = $PS["Halogen.Component"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ComponentSlot = (function () {
      function ComponentSlot(value0) {
          this.value0 = value0;
      };
      ComponentSlot.create = function (value0) {
          return new ComponentSlot(value0);
      };
      return ComponentSlot;
  })();
  var ThunkSlot = (function () {
      function ThunkSlot(value0) {
          this.value0 = value0;
      };
      ThunkSlot.create = function (value0) {
          return new ThunkSlot(value0);
      };
      return ThunkSlot;
  })();
  var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var unComponent = Unsafe_Coerce.unsafeCoerce;
  var mkEval = function (args) {
      return function (v) {
          if (v instanceof Halogen_Query_HalogenQ.Initialize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Finalize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Receive) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Action) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Query) {
              return Data_Coyoneda.unCoyoneda(function (g) {
                  var $25 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
                  return function ($26) {
                      return $25(args.handleQuery($26));
                  };
              })(v.value0);
          };
          throw new Error("Failed pattern match at Halogen.Component (line 182, column 15 - line 192, column 70): " + [ v.constructor.name ]);
      };
  };                                               
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var defaultEval = {
      handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
      handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
      receive: Data_Function["const"](Data_Maybe.Nothing.value),
      initialize: Data_Maybe.Nothing.value,
      finalize: Data_Maybe.Nothing.value
  };
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["mkEval"] = mkEval;
  exports["defaultEval"] = defaultEval;
  exports["ComponentSlot"] = ComponentSlot;
  exports["ThunkSlot"] = ThunkSlot;
  exports["unComponentSlot"] = unComponentSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Aff.Driver"] = $PS["Halogen.Aff.Driver"] || {};
  var exports = $PS["Halogen.Aff.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_Eval = $PS["Halogen.Aff.Driver.Eval"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];                
  var newLifecycleHandlers = Effect_Ref["new"]({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
  });
  var handlePending = function (ref) {
      return function __do() {
          var queue = Effect_Ref.read(ref)();
          Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(queue)((function () {
              var $28 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
              return function ($29) {
                  return Halogen_Aff_Driver_Eval.handleAff($28(Data_List.reverse($29)));
              };
          })())();
      };
  };
  var cleanupSubscriptionsAndForks = function (v) {
      return function __do() {
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Halogen_Subscription.unsubscribe)))(Effect_Ref.read(v.subscriptions))();
          Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
              var $30 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
              return function ($31) {
                  return Halogen_Aff_Driver_Eval.handleAff($30($31));
              };
          })()))(Effect_Ref.read(v.forks))();
          return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
      };
  };
  var runUI = function (renderSpec) {
      return function (component) {
          return function (i) {
              var squashChildInitializers = function (lchs) {
                  return function (preInits) {
                      return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                          return Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              handlePending(st.pendingQueries)();
                                              return handlePending(st.pendingOuts)();
                                          });
                                      });
                                  }), preInits),
                                  finalizers: handlers.finalizers
                              };
                          })(lchs);
                      });
                  };
              };
              var runComponent = function (lchs) {
                  return function (handler) {
                      return function (j) {
                          return Halogen_Component.unComponent(function (c) {
                              return function __do() {
                                  var lchs$prime = newLifecycleHandlers();
                                  var $$var = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(lchs$prime)();
                                  var pre = Effect_Ref.read(lchs)();
                                  Effect_Ref.write({
                                      initializers: Data_List_Types.Nil.value,
                                      finalizers: pre.finalizers
                                  })(lchs)();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX((function () {
                                      var $32 = render(lchs);
                                      return function ($33) {
                                          return $32((function (v) {
                                              return v.selfRef;
                                          })($33));
                                      };
                                  })()))(Effect_Ref.read($$var))();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(pre.initializers))(Effect_Ref.read($$var))();
                                  return $$var;
                              };
                          });
                      };
                  };
              };
              var renderChild = function (lchs) {
                  return function (handler) {
                      return function (childrenInRef) {
                          return function (childrenOutRef) {
                              return Halogen_Component.unComponentSlot(function (slot) {
                                  return function __do() {
                                      var childrenIn = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();
                                      var $$var = (function () {
                                          if (childrenIn instanceof Data_Maybe.Just) {
                                              Effect_Ref.write(childrenIn.value0.value1)(childrenInRef)();
                                              var dsx = Effect_Ref.read(childrenIn.value0.value0)();
                                              Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                  return function __do() {
                                                      Data_Function.flip(Effect_Ref.write)(st.handlerRef)((function () {
                                                          var $34 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                          return function ($35) {
                                                              return $34(slot.output($35));
                                                          };
                                                      })())();
                                                      return Halogen_Aff_Driver_Eval.handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Receive(slot.input, Data_Unit.unit))))();
                                                  };
                                              })(dsx)();
                                              return childrenIn.value0.value0;
                                          };
                                          if (childrenIn instanceof Data_Maybe.Nothing) {
                                              return runComponent(lchs)((function () {
                                                  var $36 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                  return function ($37) {
                                                      return $36(slot.output($37));
                                                  };
                                              })())(slot.input)(slot.component)();
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 211, column 14 - line 220, column 98): " + [ childrenIn.constructor.name ]);
                                      })();
                                      var isDuplicate = Data_Functor.map(Effect.functorEffect)(function ($38) {
                                          return Data_Maybe.isJust(slot.get($38));
                                      })(Effect_Ref.read(childrenOutRef))();
                                      Control_Applicative.when(Effect.applicativeEffect)(isDuplicate)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                      Effect_Ref.modify_(slot.set($$var))(childrenOutRef)();
                                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read($$var))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v) {
                                          if (v instanceof Data_Maybe.Nothing) {
                                              return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                          };
                                          if (v instanceof Data_Maybe.Just) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v.value0));
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 225, column 37 - line 227, column 50): " + [ v.constructor.name ]);
                                      }))();
                                  };
                              });
                          };
                      };
                  };
              };
              var render = function (lchs) {
                  return function ($$var) {
                      return function __do() {
                          var v = Effect_Ref.read($$var)();
                          var shouldProcessHandlers = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                          Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                          Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                          Effect_Ref.write(v.children)(v.childrenIn)();
                          var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
                          var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
                          var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);
                          var handler = (function () {
                              var $39 = Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers);
                              var $40 = Data_Functor["void"](Effect_Aff.functorAff);
                              var $41 = Halogen_Aff_Driver_Eval.evalF(render)(selfRef);
                              return function ($42) {
                                  return $39($40($41($42)));
                              };
                          })();
                          var childHandler = (function () {
                              var $43 = Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries);
                              return function ($44) {
                                  return $43(handler(Halogen_Query_Input.Action.create($44)));
                              };
                          })();
                          var rendering = renderSpec.render(function ($45) {
                              return Halogen_Aff_Driver_Eval.handleAff(handler($45));
                          })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                          var children = Effect_Ref.read(v.childrenOut)();
                          var childrenIn = Effect_Ref.read(v.childrenIn)();
                          Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(childrenIn)(function (v1) {
                              return function __do() {
                                  var childDS = Effect_Ref.read(v1)();
                                  Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(childDS)();
                                  return finalize(lchs)(childDS)();
                              };
                          })();
                          Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                              return {
                                  component: ds$prime.component,
                                  state: ds$prime.state,
                                  refs: ds$prime.refs,
                                  children: children,
                                  childrenIn: ds$prime.childrenIn,
                                  childrenOut: ds$prime.childrenOut,
                                  selfRef: ds$prime.selfRef,
                                  handlerRef: ds$prime.handlerRef,
                                  pendingQueries: ds$prime.pendingQueries,
                                  pendingOuts: ds$prime.pendingOuts,
                                  pendingHandlers: ds$prime.pendingHandlers,
                                  rendering: new Data_Maybe.Just(rendering),
                                  fresh: ds$prime.fresh,
                                  subscriptions: ds$prime.subscriptions,
                                  forks: ds$prime.forks,
                                  lifecycleHandlers: ds$prime.lifecycleHandlers
                              };
                          }))();
                          return Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v1) {
                              return function __do() {
                                  var handlers = Effect_Ref.read(pendingHandlers)();
                                  Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                      var $46 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                                      return function ($47) {
                                          return Halogen_Aff_Driver_Eval.handleAff($46(Data_List.reverse($47)));
                                      };
                                  })())(handlers)();
                                  var mmore = Effect_Ref.read(pendingHandlers)();
                                  var $21 = Data_Maybe.maybe(false)(Data_List["null"])(mmore);
                                  if ($21) {
                                      return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                  };
                                  return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                              };
                          }))();
                      };
                  };
              };
              var finalize = function (lchs) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                      return function __do() {
                          cleanupSubscriptionsAndForks(st)();
                          var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                          Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: handlers.initializers,
                                  finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                              };
                          })(lchs)();
                          return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                              return function __do() {
                                  var dsx = Effect_Ref.read(v)();
                                  return finalize(lchs)(dsx)();
                              };
                          })();
                      };
                  });
              };
              var evalDriver = function (disposed) {
                  return function (ref) {
                      return function (q) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                              if (v) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                              };
                              return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                          });
                      };
                  };
              };
              var dispose = function (disposed) {
                  return function (lchs) {
                      return function (dsx) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var v = Effect_Ref.read(disposed)();
                              if (v) {
                                  return Data_Unit.unit;
                              };
                              Effect_Ref.write(true)(disposed)();
                              finalize(lchs)(dsx)();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (v1) {
                                  return function __do() {
                                      var v2 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(v1.selfRef))();
                                      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.rendering)(renderSpec.dispose)();
                                  };
                              })(dsx)();
                          });
                      };
                  };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (lchs) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (fresh) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (disposed) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var sio = Halogen_Subscription.create();
                              var dsx = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(lchs)((function () {
                                  var $48 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                                  var $49 = Halogen_Subscription.notify(sio.listener);
                                  return function ($50) {
                                      return $48($49($50));
                                  };
                              })())(i)(component))();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)({
                                      query: evalDriver(disposed)(st.selfRef),
                                      messages: sio.emitter,
                                      dispose: dispose(disposed)(lchs)(dsx)
                                  });
                              })(dsx)();
                          });
                      });
                  });
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_querySelector"](qs);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var domcontentloaded = "DOMContentLoaded";
  exports["domcontentloaded"] = domcontentloaded;
})(PS);
(function(exports) {
  "use strict";

  exports._readyState = function (doc) {
    return function () {
      return doc.readyState;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.HTML.HTMLDocument.ReadyState"] = $PS["Web.HTML.HTMLDocument.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Interactive = (function () {
      function Interactive() {

      };
      Interactive.value = new Interactive();
      return Interactive;
  })();
  var Complete = (function () {
      function Complete() {

      };
      Complete.value = new Complete();
      return Complete;
  })();
  var parse = function (v) {
      if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
      };
      if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Loading"] = Loading;
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var readyState = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)((function () {
          var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
          };
      })());
      return function ($1) {
          return $0($foreign["_readyState"]($1));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["readyState"] = readyState;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["toNode"] = toNode;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Aff.Util"] = $PS["Halogen.Aff.Util"] || {};
  var exports = $PS["Halogen.Aff.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var selectElement = function (query) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)((function () {
          var $2 = Web_DOM_ParentNode.querySelector(query);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument.toParentNode($3));
          };
      })())(Web_HTML_Window.document))(Web_HTML.window)))(function (mel) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(mel));
      });
  };
  var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var awaitLoad = Effect_Aff.makeAff(function (callback) {
      return function __do() {
          var rs = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
          if (rs instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
              var et = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
              var listener = Web_Event_EventTarget.eventListener(function (v) {
                  return callback(new Data_Either.Right(Data_Unit.unit));
              })();
              Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et)();
              return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et));
          };
          callback(new Data_Either.Right(Data_Unit.unit))();
          return Effect_Aff.nonCanceler;
      };
  });
  exports["awaitLoad"] = awaitLoad;
  exports["selectElement"] = selectElement;
  exports["runHalogenAff"] = runHalogenAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.Machine"] = $PS["Halogen.VDom.Machine"] || {};
  var exports = $PS["Halogen.VDom.Machine"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Step = (function () {
      function Step(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Step(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Step;
  })();
  var unStep = Unsafe_Coerce.unsafeCoerce;
  var step = function (v, a) {
      return v.value2(v.value1, a);
  };
  var mkStep = Unsafe_Coerce.unsafeCoerce;
  var halt = function (v) {
      return v.value3(v.value1);
  };
  var extract = unStep(function (v) {
      return v.value0;
  });
  exports["Step"] = Step;
  exports["mkStep"] = mkStep;
  exports["unStep"] = unStep;
  exports["extract"] = extract;
  exports["step"] = step;
  exports["halt"] = halt;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGetAny = function (key, obj) {
    return obj[key];
  };

  exports.unsafeHasAny = function (key, obj) {
    return obj.hasOwnProperty(key);
  };

  exports.unsafeSetAny = function (key, val, obj) {
      obj[key] = val;
  };

  exports.forE = function (a, f) {
    var b = [];
    for (var i = 0; i < a.length; i++) {
      b.push(f(i, a[i]));
    }
    return b;
  };

  exports.forEachE = function (a, f) {
    for (var i = 0; i < a.length; i++) {
      f(a[i]);
    }
  };

  exports.forInE = function (o, f) {
    var ks = Object.keys(o);
    for (var i = 0; i < ks.length; i++) {
      var k = ks[i];
      f(k, o[k]);
    }
  };

  exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
    var a3 = [];
    var l1 = a1.length;
    var l2 = a2.length;
    var i  = 0;
    while (1) {
      if (i < l1) {
        if (i < l2) {
          a3.push(f1(i, a1[i], a2[i]));
        } else {
          f2(i, a1[i]);
        }
      } else if (i < l2) {
        a3.push(f3(i, a2[i]));
      } else {
        break;
      }
      i++;
    }
    return a3;
  };

  exports.strMapWithIxE = function (as, fk, f) {
    var o = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      o[k] = f(k, i, a);
    }
    return o;
  };

  exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
    var o2 = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      if (o1.hasOwnProperty(k)) {
        o2[k] = f1(k, i, o1[k], a);
      } else {
        o2[k] = f3(k, i, a);
      }
    }
    for (var k in o1) {
      if (k in o2) {
        continue;
      }
      f2(k, o1[k]);
    }
    return o2;
  };

  exports.refEq = function (a, b) {
    return a === b;
  };

  exports.createTextNode = function (s, doc) {
    return doc.createTextNode(s);
  };

  exports.setTextContent = function (s, n) {
    n.textContent = s;
  };

  exports.createElement = function (ns, name, doc) {
    if (ns != null) {
      return doc.createElementNS(ns, name);
    } else {
      return doc.createElement(name)
    }
  };

  exports.insertChildIx = function (i, a, b) {
    var n = b.childNodes.item(i) || null;
    if (n !== a) {
      b.insertBefore(a, n);
    }
  };

  exports.removeChild = function (a, b) {
    if (b && a.parentNode === b) {
      b.removeChild(a);
    }
  };

  exports.parentNode = function (a) {
    return a.parentNode;
  };

  exports.setAttribute = function (ns, attr, val, el) {
    if (ns != null) {
      el.setAttributeNS(ns, attr, val);
    } else {
      el.setAttribute(attr, val);
    }
  };

  exports.removeAttribute = function (ns, attr, el) {
    if (ns != null) {
      el.removeAttributeNS(ns, attr);
    } else {
      el.removeAttribute(attr);
    }
  };

  exports.hasAttribute = function (ns, attr, el) {
    if (ns != null) {
      return el.hasAttributeNS(ns, attr);
    } else {
      return el.hasAttribute(attr);
    }
  };

  exports.addEventListener = function (ev, listener, el) {
    el.addEventListener(ev, listener, false);
  };

  exports.removeEventListener = function (ev, listener, el) {
    el.removeEventListener(ev, listener, false);
  };

  exports.jsUndefined = void 0;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.Util"] = $PS["Halogen.VDom.Util"] || {};
  var exports = $PS["Halogen.VDom.Util"];
  var $foreign = $PS["Halogen.VDom.Util"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeLookup = $foreign.unsafeGetAny;
  var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
  var pokeMutMap = $foreign.unsafeSetAny;
  var newMutMap = Foreign_Object_ST["new"];
  exports["newMutMap"] = newMutMap;
  exports["pokeMutMap"] = pokeMutMap;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeLookup"] = unsafeLookup;
  exports["unsafeGetAny"] = $foreign.unsafeGetAny;
  exports["unsafeHasAny"] = $foreign.unsafeHasAny;
  exports["unsafeSetAny"] = $foreign.unsafeSetAny;
  exports["forE"] = $foreign.forE;
  exports["forEachE"] = $foreign.forEachE;
  exports["forInE"] = $foreign.forInE;
  exports["diffWithIxE"] = $foreign.diffWithIxE;
  exports["diffWithKeyAndIxE"] = $foreign.diffWithKeyAndIxE;
  exports["strMapWithIxE"] = $foreign.strMapWithIxE;
  exports["refEq"] = $foreign.refEq;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["createElement"] = $foreign.createElement;
  exports["insertChildIx"] = $foreign.insertChildIx;
  exports["removeChild"] = $foreign.removeChild;
  exports["parentNode"] = $foreign.parentNode;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["hasAttribute"] = $foreign.hasAttribute;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["jsUndefined"] = $foreign.jsUndefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.DOM.Prop"] = $PS["Halogen.VDom.DOM.Prop"] || {};
  var exports = $PS["Halogen.VDom.DOM.Prop"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];                
  var Created = (function () {
      function Created(value0) {
          this.value0 = value0;
      };
      Created.create = function (value0) {
          return new Created(value0);
      };
      return Created;
  })();
  var Removed = (function () {
      function Removed(value0) {
          this.value0 = value0;
      };
      Removed.create = function (value0) {
          return new Removed(value0);
      };
      return Removed;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attribute(value0, value1, value2);
              };
          };
      };
      return Attribute;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
  var setProperty = Halogen_VDom_Util.unsafeSetAny;
  var removeProperty = function (key, el) {
      var v = Halogen_VDom_Util.hasAttribute(Data_Nullable["null"], key, el);
      if (v) {
          return Halogen_VDom_Util.removeAttribute(Data_Nullable["null"], key, el);
      };
      var v1 = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
      if (v1 === "string") {
          return Halogen_VDom_Util.unsafeSetAny(key, "", el);
      };
      if (key === "rowSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      if (key === "colSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
  };
  var propToStrKey = function (v) {
      if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
          return "attr/" + (v.value0.value0 + (":" + v.value1));
      };
      if (v instanceof Attribute) {
          return "attr/:" + v.value1;
      };
      if (v instanceof Property) {
          return "prop/" + v.value0;
      };
      if (v instanceof Handler) {
          return "handler/" + v.value0;
      };
      if (v instanceof Ref) {
          return "ref";
      };
      throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [ v.constructor.name ]);
  };
  var propFromString = Unsafe_Coerce.unsafeCoerce;
  var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
  var buildProp = function (emit) {
      return function (el) {
          var removeProp = function (prevEvents) {
              return function (v, v1) {
                  if (v1 instanceof Attribute) {
                      return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                  };
                  if (v1 instanceof Property) {
                      return removeProperty(v1.value0, el);
                  };
                  if (v1 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                      return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                  };
                  if (v1 instanceof Ref) {
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
              };
          };
          var mbEmit = function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return emit(v.value0)();
              };
              return Data_Unit.unit;
          };
          var haltProp = function (state) {
              var v = Foreign_Object.lookup("ref")(state.props);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                  return mbEmit(v.value0.value0(new Removed(el)));
              };
              return Data_Unit.unit;
          };
          var diffProp = function (prevEvents, events) {
              return function (v, v1, v11, v2) {
                  if (v11 instanceof Attribute && v2 instanceof Attribute) {
                      var $56 = v11.value2 === v2.value2;
                      if ($56) {
                          return v2;
                      };
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v11 instanceof Property && v2 instanceof Property) {
                      var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                      if (v4) {
                          return v2;
                      };
                      if (v2.value0 === "value") {
                          var elVal = unsafeGetProperty("value", el);
                          var $65 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                          if ($65) {
                              return v2;
                          };
                          setProperty(v2.value0, v2.value1, el);
                          return v2;
                      };
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v11 instanceof Handler && v2 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                      Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                      return v2;
                  };
                  return v2;
              };
          };
          var applyProp = function (events) {
              return function (v, v1, v2) {
                  if (v2 instanceof Attribute) {
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v2 instanceof Property) {
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v2 instanceof Handler) {
                      var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                      if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                          Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                          return v2;
                      };
                      var ref = Effect_Ref["new"](v2.value1)();
                      var listener = Web_Event_EventTarget.eventListener(function (ev) {
                          return function __do() {
                              var f$prime = Effect_Ref.read(ref)();
                              return mbEmit(f$prime(ev));
                          };
                      })();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, ref), events);
                      Halogen_VDom_Util.addEventListener(v2.value0, listener, el);
                      return v2;
                  };
                  if (v2 instanceof Ref) {
                      mbEmit(v2.value0(new Created(el)));
                      return v2;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
              };
          };
          var patchProp = function (state, ps2) {
              var events = Halogen_VDom_Util.newMutMap();
              var onThis = removeProp(state.events);
              var onThese = diffProp(state.events, events);
              var onThat = applyProp(events);
              var props = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
              var nextState = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: props
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
          };
          var renderProp = function (ps1) {
              var events = Halogen_VDom_Util.newMutMap();
              var ps1$prime = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(events));
              var state = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: ps1$prime
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
          };
          return renderProp;
      };
  };
  exports["Attribute"] = Attribute;
  exports["Property"] = Property;
  exports["Handler"] = Handler;
  exports["propFromString"] = propFromString;
  exports["propFromBoolean"] = propFromBoolean;
  exports["buildProp"] = buildProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.Types"] = $PS["Halogen.VDom.Types"] || {};
  var exports = $PS["Halogen.VDom.Types"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Elem = (function () {
      function Elem(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Elem.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Elem(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Elem;
  })();
  var Keyed = (function () {
      function Keyed(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Keyed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Keyed(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Keyed;
  })();
  var Widget = (function () {
      function Widget(value0) {
          this.value0 = value0;
      };
      Widget.create = function (value0) {
          return new Widget(value0);
      };
      return Widget;
  })();
  var Grafted = (function () {
      function Grafted(value0) {
          this.value0 = value0;
      };
      Grafted.create = function (value0) {
          return new Grafted(value0);
      };
      return Grafted;
  })();
  var Graft = (function () {
      function Graft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Graft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Graft(value0, value1, value2);
              };
          };
      };
      return Graft;
  })();
  var unGraft = function (f) {
      return function ($52) {
          return f($52);
      };
  }; 
  var graft = Unsafe_Coerce.unsafeCoerce;
  var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unGraft(function (v) {
              return graft(new Graft(function ($54) {
                  return f(v.value0($54));
              }, function ($55) {
                  return g(v.value1($55));
              }, v.value2));
          });
      };
  });
  var runGraft = unGraft(function (v) {
      var go = function (v2) {
          if (v2 instanceof Text) {
              return new Text(v2.value0);
          };
          if (v2 instanceof Elem) {
              return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
          };
          if (v2 instanceof Keyed) {
              return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
          };
          if (v2 instanceof Widget) {
              return new Widget(v.value1(v2.value0));
          };
          if (v2 instanceof Grafted) {
              return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
      };
      return go(v.value2);
  });
  exports["Text"] = Text;
  exports["Elem"] = Elem;
  exports["Keyed"] = Keyed;
  exports["Widget"] = Widget;
  exports["Grafted"] = Grafted;
  exports["runGraft"] = runGraft;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.HTML.Core"] = $PS["Halogen.HTML.Core"] || {};
  var exports = $PS["Halogen.HTML.Core"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];          
  var IsProp = function (toPropValue) {
      this.toPropValue = toPropValue;
  };
  var HTML = function (x) {
      return x;
  };
  var toPropValue = function (dict) {
      return dict.toPropValue;
  };
  var text = function ($19) {
      return HTML(Halogen_VDom_Types.Text.create($19));
  };
  var prop = function (dictIsProp) {
      return function (v) {
          var $21 = Halogen_VDom_DOM_Prop.Property.create(v);
          var $22 = toPropValue(dictIsProp);
          return function ($23) {
              return $21($22($23));
          };
      };
  }; 
  var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
  var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
  var handler = Halogen_VDom_DOM_Prop.Handler.create;
  var element = function (ns) {
      return function (name) {
          return function (props) {
              return function (children) {
                  return new Halogen_VDom_Types.Elem(ns, name, props, children);
              };
          };
      };
  };                                                                             
  var attr = function (ns) {
      return function (v) {
          return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
      };
  };
  exports["text"] = text;
  exports["element"] = element;
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["handler"] = handler;
  exports["isPropString"] = isPropString;
  exports["isPropBoolean"] = isPropBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.HTML.Elements"] = $PS["Halogen.HTML.Elements"] || {};
  var exports = $PS["Halogen.HTML.Elements"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
  var h1 = element("h1");
  var h1_ = h1([  ]);            
  var option = element("option");
  var p = element("p");
  var p_ = p([  ]);
  var pre = element("pre");
  var pre_ = pre([  ]);        
  var select = element("select");
  var select_ = select([  ]);
  var div = element("div");
  var div_ = div([  ]);
  var button = element("button");
  exports["button"] = button;
  exports["div"] = div;
  exports["div_"] = div_;
  exports["h1_"] = h1_;
  exports["option"] = option;
  exports["p_"] = p_;
  exports["pre_"] = pre_;
  exports["select_"] = select_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var click = "click";
  exports["click"] = click;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.HTML.Events"] = $PS["Halogen.HTML.Events"] || {};
  var exports = $PS["Halogen.HTML.Events"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var handler = function (et) {
      return function (f) {
          return Halogen_HTML_Core.handler(et)(function (ev) {
              return new Data_Maybe.Just(new Halogen_Query_Input.Action(f(ev)));
          });
      };
  };                                                       
  var onClick = (function () {
      var $1 = handler(Web_UIEvent_MouseEvent_EventTypes.click);
      return function ($2) {
          return $1(mouseHandler($2));
      };
  })();
  exports["onClick"] = onClick;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.HTML.Properties"] = $PS["Halogen.HTML.Properties"] || {};
  var exports = $PS["Halogen.HTML.Properties"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var prop = function (dictIsProp) {
      return Halogen_HTML_Core.prop(dictIsProp);
  };                                                            
  var selected = prop(Halogen_HTML_Core.isPropBoolean)("selected");
  var value = prop(Halogen_HTML_Core.isPropString)("value");      
  var disabled = prop(Halogen_HTML_Core.isPropBoolean)("disabled");
  var enabled = (function () {
      var $10 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
      return function ($11) {
          return disabled($10($11));
      };
  })();
  var class_ = (function () {
      var $16 = prop(Halogen_HTML_Core.isPropString)("className");
      var $17 = Data_Newtype.unwrap();
      return function ($18) {
          return $16($17($18));
      };
  })();
  var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
  var style = attr("style");
  exports["class_"] = class_;
  exports["style"] = style;
  exports["value"] = value;
  exports["enabled"] = enabled;
  exports["selected"] = selected;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Query.Event"] = $PS["Halogen.Query.Event"] || {};
  var exports = $PS["Halogen.Query.Event"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Effect = $PS["Effect"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];                
  var eventListener = function (eventType) {
      return function (target) {
          return function (f) {
              return Halogen_Subscription.makeEmitter(function (push) {
                  return function __do() {
                      var listener = Web_Event_EventTarget.eventListener(function (ev) {
                          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(push)(f(ev));
                      })();
                      Web_Event_EventTarget.addEventListener(eventType)(listener)(false)(target)();
                      return Web_Event_EventTarget.removeEventListener(eventType)(listener)(false)(target);
                  };
              });
          };
      };
  };
  exports["eventListener"] = eventListener;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Svg.Core"] = $PS["Halogen.Svg.Core"] || {};
  var exports = $PS["Halogen.Svg.Core"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];                
  var ns = Data_Maybe.Just.create("http://www.w3.org/2000/svg");
  var element = function (name) {
      return function (props) {
          return function (children) {
              return new Halogen_VDom_Types.Elem(ns, name, props, children);
          };
      };
  };
  var attr = function (v) {
      return Halogen_VDom_DOM_Prop.Attribute.create(Data_Maybe.Nothing.value)(v);
  };
  exports["element"] = element;
  exports["attr"] = attr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Svg.Attributes"] = $PS["Halogen.Svg.Attributes"] || {};
  var exports = $PS["Halogen.Svg.Attributes"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Halogen_Svg_Core = $PS["Halogen.Svg.Core"];
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var AnchorMiddle = (function () {
      function AnchorMiddle() {

      };
      AnchorMiddle.value = new AnchorMiddle();
      return AnchorMiddle;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var RGB = (function () {
      function RGB(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RGB.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RGB(value0, value1, value2);
              };
          };
      };
      return RGB;
  })();
  var RGBA = (function () {
      function RGBA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      RGBA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new RGBA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return RGBA;
  })();
  var Auto = (function () {
      function Auto() {

      };
      Auto.value = new Auto();
      return Auto;
  })();
  var UseScript = (function () {
      function UseScript() {

      };
      UseScript.value = new UseScript();
      return UseScript;
  })();
  var NoChange = (function () {
      function NoChange() {

      };
      NoChange.value = new NoChange();
      return NoChange;
  })();
  var ResetSize = (function () {
      function ResetSize() {

      };
      ResetSize.value = new ResetSize();
      return ResetSize;
  })();
  var Ideographic = (function () {
      function Ideographic() {

      };
      Ideographic.value = new Ideographic();
      return Ideographic;
  })();
  var Alphabetic = (function () {
      function Alphabetic() {

      };
      Alphabetic.value = new Alphabetic();
      return Alphabetic;
  })();
  var Hanging = (function () {
      function Hanging() {

      };
      Hanging.value = new Hanging();
      return Hanging;
  })();
  var Mathematical = (function () {
      function Mathematical() {

      };
      Mathematical.value = new Mathematical();
      return Mathematical;
  })();
  var Central = (function () {
      function Central() {

      };
      Central.value = new Central();
      return Central;
  })();
  var BaselineMiddle = (function () {
      function BaselineMiddle() {

      };
      BaselineMiddle.value = new BaselineMiddle();
      return BaselineMiddle;
  })();
  var TextAfterEdge = (function () {
      function TextAfterEdge() {

      };
      TextAfterEdge.value = new TextAfterEdge();
      return TextAfterEdge;
  })();
  var TextBeforeEdge = (function () {
      function TextBeforeEdge() {

      };
      TextBeforeEdge.value = new TextBeforeEdge();
      return TextBeforeEdge;
  })();
  var printTextAnchor = function (v1) {
      if (v1 instanceof Start) {
          return "start";
      };
      if (v1 instanceof AnchorMiddle) {
          return "middle";
      };
      if (v1 instanceof End) {
          return "end";
      };
      throw new Error("Failed pattern match at Halogen.Svg.Attributes (line 189, column 19 - line 192, column 15): " + [ v1.constructor.name ]);
  };
  var printColor = function (v1) {
      if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof RGB) {
          return "rgb(" + (Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(Data_Show.show(Data_Show.showInt))([ v1.value0.value0, v1.value0.value1, v1.value0.value2 ])) + ")");
      };
      if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof RGBA) {
          return "rgba(" + (Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(Data_Show.show(Data_Show.showInt))([ v1.value0.value0, v1.value0.value1, v1.value0.value2 ])) + ("," + (Data_Show.show(Data_Show.showNumber)(v1.value0.value3) + ")")));
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return "None";
      };
      throw new Error("Failed pattern match at Halogen.Svg.Attributes (line 88, column 14 - line 91, column 20): " + [ v1.constructor.name ]);
  };
  var printBaseline = function (v1) {
      if (v1 instanceof Auto) {
          return "auto";
      };
      if (v1 instanceof UseScript) {
          return "use-script";
      };
      if (v1 instanceof NoChange) {
          return "no-change";
      };
      if (v1 instanceof ResetSize) {
          return "reset-size";
      };
      if (v1 instanceof Ideographic) {
          return "ideographic";
      };
      if (v1 instanceof Alphabetic) {
          return "alphabetic";
      };
      if (v1 instanceof Hanging) {
          return "hanging";
      };
      if (v1 instanceof Mathematical) {
          return "mathematical";
      };
      if (v1 instanceof Central) {
          return "central";
      };
      if (v1 instanceof BaselineMiddle) {
          return "middle";
      };
      if (v1 instanceof TextAfterEdge) {
          return "text-after-edge";
      };
      if (v1 instanceof TextBeforeEdge) {
          return "text-before-edge";
      };
      throw new Error("Failed pattern match at Halogen.Svg.Attributes (line 199, column 17 - line 211, column 39): " + [ v1.constructor.name ]);
  };
  var attr = Halogen_Svg_Core.attr;
  var dominant_baseline = (function () {
      var $133 = attr("dominant-baseline");
      return function ($134) {
          return $133(printBaseline($134));
      };
  })();
  var fill = (function () {
      var $137 = attr("fill");
      return function ($138) {
          return $137(printColor($138));
      };
  })();                   
  var height = (function () {
      var $144 = attr("height");
      var $145 = Data_Show.show(Data_Show.showNumber);
      return function ($146) {
          return $144($145($146));
      };
  })();
  var stroke = (function () {
      var $178 = attr("stroke");
      return function ($179) {
          return $178(printColor($179));
      };
  })();
  var strokeWidth = (function () {
      var $180 = attr("stroke-width");
      var $181 = Data_Show.show(Data_Show.showNumber);
      return function ($182) {
          return $180($181($182));
      };
  })();
  var text_anchor = (function () {
      var $183 = attr("text-anchor");
      return function ($184) {
          return $183(printTextAnchor($184));
      };
  })();
  var viewBox = function (x_) {
      return function (y_) {
          return function (w) {
              return function (h_) {
                  return attr("viewBox")(Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(Data_Show.show(Data_Show.showNumber))([ x_, y_, w, h_ ])));
              };
          };
      };
  };
  var width = (function () {
      var $189 = attr("width");
      var $190 = Data_Show.show(Data_Show.showNumber);
      return function ($191) {
          return $189($190($191));
      };
  })();
  var x = (function () {
      var $192 = attr("x");
      var $193 = Data_Show.show(Data_Show.showNumber);
      return function ($194) {
          return $192($193($194));
      };
  })();
  var x1 = (function () {
      var $195 = attr("x1");
      var $196 = Data_Show.show(Data_Show.showNumber);
      return function ($197) {
          return $195($196($197));
      };
  })();
  var x2 = (function () {
      var $198 = attr("x2");
      var $199 = Data_Show.show(Data_Show.showNumber);
      return function ($200) {
          return $198($199($200));
      };
  })();
  var y = (function () {
      var $201 = attr("y");
      var $202 = Data_Show.show(Data_Show.showNumber);
      return function ($203) {
          return $201($202($203));
      };
  })();
  var y1 = (function () {
      var $204 = attr("y1");
      var $205 = Data_Show.show(Data_Show.showNumber);
      return function ($206) {
          return $204($205($206));
      };
  })();
  var y2 = (function () {
      var $207 = attr("y2");
      var $208 = Data_Show.show(Data_Show.showNumber);
      return function ($209) {
          return $207($208($209));
      };
  })();
  exports["RGB"] = RGB;
  exports["AnchorMiddle"] = AnchorMiddle;
  exports["BaselineMiddle"] = BaselineMiddle;
  exports["attr"] = attr;
  exports["viewBox"] = viewBox;
  exports["width"] = width;
  exports["height"] = height;
  exports["x"] = x;
  exports["y"] = y;
  exports["x1"] = x1;
  exports["y1"] = y1;
  exports["x2"] = x2;
  exports["y2"] = y2;
  exports["stroke"] = stroke;
  exports["fill"] = fill;
  exports["text_anchor"] = text_anchor;
  exports["dominant_baseline"] = dominant_baseline;
  exports["strokeWidth"] = strokeWidth;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.Svg.Elements"] = $PS["Halogen.Svg.Elements"] || {};
  var exports = $PS["Halogen.Svg.Elements"];
  var Halogen_Svg_Core = $PS["Halogen.Svg.Core"];                
  var element = Halogen_Svg_Core.element;      
  var g = element("g");
  var line = function (props) {
      return element("line")(props)([  ]);
  };
  var rect = function (props) {
      return element("rect")(props)([  ]);
  };
  var svg = element("svg");
  var text = element("text");
  var title = element("title");
  exports["svg"] = svg;
  exports["g"] = g;
  exports["rect"] = rect;
  exports["line"] = line;
  exports["text"] = text;
  exports["title"] = title;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.DOM"] = $PS["Halogen.VDom.DOM"] || {};
  var exports = $PS["Halogen.VDom.DOM"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var haltWidget = function (v) {
      return Halogen_VDom_Machine.halt(v.widget);
  };
  var patchWidget = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Widget) {
          var res = Halogen_VDom_Machine.step(state.widget, vdom.value0);
          var res$prime = Halogen_VDom_Machine.unStep(function (v) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v.value0, {
                  build: state.build,
                  widget: res
              }, patchWidget, haltWidget));
          })(res);
          return res$prime;
      };
      haltWidget(state);
      return state.build(vdom);
  };
  var haltText = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      return Halogen_VDom_Util.removeChild(v.node, parent);
  };
  var patchText = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Text) {
          if (state.value === vdom.value0) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
          };
          if (Data_Boolean.otherwise) {
              var nextState = {
                  build: state.build,
                  node: state.node,
                  value: vdom.value0
              };
              Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
          };
      };
      haltText(state);
      return state.build(vdom);
  };
  var haltKeyed = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forInE(v.children, function (v1, s) {
          return Halogen_VDom_Machine.halt(s);
      });
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var haltElem = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var eqElemSpec = function (ns1, v, ns2, v1) {
      var $56 = v === v1;
      if ($56) {
          if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
              return true;
          };
          if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
              return true;
          };
          return false;
      };
      return false;
  };
  var patchElem = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          var v1 = Data_Array.length(state.children);
          if (v1 === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
          };
          var onThis = function (ix, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (ix, s, v2) {
              var res = Halogen_VDom_Machine.step(s, v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (ix, v2) {
              var res = state.build(v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
      };
      haltElem(state);
      return state.build(vdom);
  };
  var patchKeyed = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          if (state.length === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children,
                  length: 0
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
          };
          var onThis = function (v2, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (v2, ix$prime, s, v3) {
              var res = Halogen_VDom_Machine.step(s, v3.value1);
              Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (v2, ix, v3) {
              var res = state.build(v3.value1);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2,
              length: v
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
      };
      haltKeyed(state);
      return state.build(vdom);
  };
  var buildWidget = function (v, build, w) {
      var res = v.buildWidget(v)(w);
      var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
              build: build,
              widget: res
          }, patchWidget, haltWidget));
      })(res);
      return res$prime;
  };
  var buildText = function (v, build, s) {
      var node = Halogen_VDom_Util.createTextNode(s, v.document);
      var state = {
          build: build,
          node: node,
          value: s
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchText, haltText));
  };
  var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (k, ix, v1) {
          var res = build(v1.value1);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children,
          length: Data_Array.length(ch1)
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
  };
  var buildElem = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (ix, child) {
          var res = build(child);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.forE(ch1, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
  };
  var buildVDom = function (spec) {
      var build = function (v) {
          if (v instanceof Halogen_VDom_Types.Text) {
              return buildText(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Elem) {
              return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Keyed) {
              return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Widget) {
              return buildWidget(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Grafted) {
              return build(Halogen_VDom_Types.runGraft(v.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
      };
      return build;
  };
  exports["buildVDom"] = buildVDom;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.Thunk"] = $PS["Halogen.VDom.Thunk"] || {};
  var exports = $PS["Halogen.VDom.Thunk"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];        
  var Thunk = (function () {
      function Thunk(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Thunk.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Thunk(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Thunk;
  })();                                          
  var unsafeEqThunk = function (v, v1) {
      return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && v.value1(v.value3, v1.value3));
  };
  var thunk = function (tid, eqFn, f, a) {
      return new Thunk(tid, eqFn, f, a);
  };
  var runThunk = function (v) {
      return v.value2(v.value3);
  };
  var buildThunk = function (toVDom) {
      var haltThunk = function (state) {
          return Halogen_VDom_Machine.halt(state.vdom);
      };
      var patchThunk = function (state, t2) {
          var $43 = unsafeEqThunk(state.thunk, t2);
          if ($43) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
          };
          var vdom = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
              vdom: vdom,
              thunk: t2
          }, patchThunk, haltThunk));
      };
      var renderThunk = function (spec) {
          return function (t) {
              var vdom = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
                  thunk: t,
                  vdom: vdom
              }, patchThunk, haltThunk));
          };
      };
      return renderThunk;
  };
  exports["buildThunk"] = buildThunk;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");          

  exports._nextSibling = getEffProp("nextSibling");

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var parentNode = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_parentNode"]($4));
      };
  })();
  var nextSibling = (function () {
      var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($15) {
          return $14($foreign["_nextSibling"]($15));
      };
  })();
  exports["parentNode"] = parentNode;
  exports["nextSibling"] = nextSibling;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Halogen.VDom.Driver"] = $PS["Halogen.VDom.Driver"] || {};
  var exports = $PS["Halogen.VDom.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver = $PS["Halogen.Aff.Driver"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Thunk = $PS["Halogen.VDom.Thunk"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var substInParent = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var removeChild = function (v) {
      return function __do() {
          var npn = Web_DOM_Node.parentNode(v.node)();
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
              return Web_DOM_Node.removeChild(v.node)(pn);
          })(npn)();
      };
  };
  var mkSpec = function (handler) {
      return function (renderChildRef) {
          return function (document) {
              var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                  return v.node;
              });
              var done = function (st) {
                  if (st instanceof Data_Maybe.Just) {
                      return Halogen_VDom_Machine.halt(st.value0);
                  };
                  return Data_Unit.unit;
              };
              var buildWidget = function (spec) {
                  var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap())(spec);
                  var renderComponentSlot = function (cs) {
                      var renderChild = Effect_Ref.read(renderChildRef)();
                      var rsx = renderChild(cs)();
                      var node = getNode(rsx);
                      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                  };
                  var render = function (slot) {
                      if (slot instanceof Halogen_Component.ComponentSlot) {
                          return renderComponentSlot(slot.value0);
                      };
                      if (slot instanceof Halogen_Component.ThunkSlot) {
                          var step = buildThunk(slot.value0);
                          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step), new Data_Maybe.Just(step), patch, done));
                      };
                      throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                  };
                  var patch = function (st, slot) {
                      if (st instanceof Data_Maybe.Just) {
                          if (slot instanceof Halogen_Component.ComponentSlot) {
                              Halogen_VDom_Machine.halt(st.value0);
                              return renderComponentSlot(slot.value0);
                          };
                          if (slot instanceof Halogen_Component.ThunkSlot) {
                              var step$prime = Halogen_VDom_Machine.step(st.value0, slot.value0);
                              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step$prime), new Data_Maybe.Just(step$prime), patch, done));
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                      };
                      return render(slot);
                  };
                  return render;
              };
              var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
              return {
                  buildWidget: buildWidget,
                  buildAttributes: buildAttributes,
                  document: document
              };
          };
      };
  };
  var renderSpec = function (document) {
      return function (container) {
          var render = function (handler) {
              return function (child) {
                  return function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return function __do() {
                                  var renderChildRef = Effect_Ref["new"](child)();
                                  var spec = mkSpec(handler)(renderChildRef)(document);
                                  var machine = Halogen_VDom_DOM.buildVDom(spec)(v);
                                  var node = Halogen_VDom_Machine.extract(machine);
                                  Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                  return {
                                      machine: machine,
                                      node: node,
                                      renderChildRef: renderChildRef
                                  };
                              };
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                  var parent = Web_DOM_Node.parentNode(v1.value0.node)();
                                  var nextSib = Web_DOM_Node.nextSibling(v1.value0.node)();
                                  var machine$prime = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                  var newNode = Halogen_VDom_Machine.extract(machine$prime);
                                  Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent))();
                                  return {
                                      machine: machine$prime,
                                      node: newNode,
                                      renderChildRef: v1.value0.renderChildRef
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
          return {
              render: render,
              renderChild: Control_Category.identity(Control_Category.categoryFn),
              removeChild: removeChild,
              dispose: removeChild
          };
      };
  };
  var runUI = function (component) {
      return function (i) {
          return function (element) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (document) {
                  return Halogen_Aff_Driver.runUI(renderSpec(document)(element))(component)(i);
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Validation"] = $PS["Validation"] || {};
  var exports = $PS["Validation"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Pitches_Class = $PS["Data.Pitches.Class"];
  var Data_Pitches_Spelled = $PS["Data.Pitches.Spelled"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Folding = $PS["Folding"];
  var Model = $PS["Model"];                
  var SSInvalidReduction = (function () {
      function SSInvalidReduction() {

      };
      SSInvalidReduction.value = new SSInvalidReduction();
      return SSInvalidReduction;
  })();
  var NSNoExpl = (function () {
      function NSNoExpl() {

      };
      NSNoExpl.value = new NSNoExpl();
      return NSNoExpl;
  })();
  var NSInvalidExplanation = (function () {
      function NSInvalidExplanation() {

      };
      NSInvalidExplanation.value = new NSInvalidExplanation();
      return NSInvalidExplanation;
  })();
  var ESNotUsed = (function () {
      function ESNotUsed() {

      };
      ESNotUsed.value = new ESNotUsed();
      return ESNotUsed;
  })();
  var ESNotStepwise = (function () {
      function ESNotStepwise() {

      };
      ESNotStepwise.value = new ESNotStepwise();
      return ESNotStepwise;
  })();
  var ESNotRepetition = (function () {
      function ESNotRepetition() {

      };
      ESNotRepetition.value = new ESNotRepetition();
      return ESNotRepetition;
  })();
  var validateNote = function (note) {
      var err = (function () {
          if (note.expl instanceof Model.NoExpl) {
              return new Data_Maybe.Just(NSNoExpl.value);
          };
          if (note.expl instanceof Model.RootExpl) {
              return Data_Maybe.Nothing.value;
          };
          if (note.expl instanceof Model.HoriExpl) {
              var $24 = Data_Eq.eq(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval))(note.note.pitch)(note.expl.value0.pitch);
              if ($24) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just(NSInvalidExplanation.value);
          };
          if (note.expl instanceof Model.LeftExpl) {
              if (note.expl.value0.orn instanceof Data_Maybe.Nothing) {
                  return new Data_Maybe.Just(NSInvalidExplanation.value);
              };
              var $27 = Data_Eq.eq(Data_Maybe.eqMaybe(Model.eqLeftOrnament))(note.expl.value0.orn)(Model.findLeftOrn(note.note.pitch)(note.expl.value0.rightParent));
              if ($27) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just(NSInvalidExplanation.value);
          };
          if (note.expl instanceof Model.RightExpl) {
              if (note.expl.value0.orn instanceof Data_Maybe.Nothing) {
                  return new Data_Maybe.Just(NSInvalidExplanation.value);
              };
              var $30 = Data_Eq.eq(Data_Maybe.eqMaybe(Model.eqRightOrnament))(note.expl.value0.orn)(Model.findRightOrn(note.note.pitch)(note.expl.value0.leftParent));
              if ($30) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just(NSInvalidExplanation.value);
          };
          if (note.expl instanceof Model.DoubleExpl) {
              if (note.expl.value0.orn instanceof Data_Maybe.Nothing) {
                  return new Data_Maybe.Just(NSInvalidExplanation.value);
              };
              var $33 = Data_Eq.eq(Data_Maybe.eqMaybe(Model.eqDoubleOrnament))(note.expl.value0.orn)(Model.findDoubleOrn(note.note.pitch)(note.expl.value0.leftParent)(note.expl.value0.rightParent));
              if ($33) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just(NSInvalidExplanation.value);
          };
          throw new Error("Failed pattern match at Validation (line 51, column 9 - line 80, column 36): " + [ note.expl.constructor.name ]);
      })();
      return Control_Bind.bind(Data_Maybe.bindMaybe)(err)(function (stat) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
              id: note.note.id,
              stat: stat
          });
      });
  };
  var validateSlice = function (slice) {
      return function (st) {
          var notes$prime = (function () {
              if (slice.notes instanceof Model.Inner) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (mp) {
                      return function (v) {
                          return Data_Map_Internal.insert(Data_Ord.ordString)(v.id)(v.stat)(mp);
                      };
                  })(st.notes)(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(validateNote)(slice.notes.value0)));
              };
              return st.notes;
          })();
          return {
              notes: notes$prime,
              edges: st.edges,
              slices: st.slices
          };
      };
  };
  var validationAlg = (function () {
      var splitLeft = function (v) {
          return function (v1) {
              var explainedEdges = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "ls";
              }))(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "right";
              }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                  return "left";
              }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Ord.ordString)))))))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "rs";
              }))(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "right";
              }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                  return "left";
              }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Ord.ordString)))))))()(Data_Monoid.monoidRecordNil))))(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  if (v2.expl instanceof Model.DoubleExpl) {
                      return new Data_Maybe.Just({
                          ls: Data_Set.singleton({
                              left: new Model.Inner(v2.expl.value0.leftParent),
                              right: new Model.Inner(v2.note)
                          }),
                          rs: Data_Set.singleton({
                              left: new Model.Inner(v2.note),
                              right: new Model.Inner(v2.expl.value0.rightParent)
                          })
                      });
                  };
                  if (v2.expl instanceof Model.LeftExpl) {
                      return new Data_Maybe.Just({
                          ls: Data_Set.empty,
                          rs: Data_Set.singleton({
                              left: new Model.Inner(v2.note),
                              right: new Model.Inner(v2.expl.value0.rightParent)
                          })
                      });
                  };
                  if (v2.expl instanceof Model.RightExpl) {
                      return new Data_Maybe.Just({
                          rs: Data_Set.empty,
                          ls: Data_Set.singleton({
                              left: new Model.Inner(v2.expl.value0.leftParent),
                              right: new Model.Inner(v2.note)
                          })
                      });
                  };
                  return Data_Maybe.Nothing.value;
              })(Model.getInnerNotes(v1.childl.rslice))));
              var leftChildren = Data_Functor.map(Data_Functor.functorArray)(function (edge) {
                  var $53 = Data_Set.member(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "right";
                  }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "pitch";
                  }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                      return "id";
                  }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                      return "left";
                  }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "pitch";
                  }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                      return "id";
                  }))(Data_Ord.ordString))))))(edge)(explainedEdges.ls);
                  if ($53) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just({
                      edge: edge,
                      stat: ESNotUsed.value
                  });
              })(Model.transEdges(v1.childl.trans));
              var rightChildren = Data_Functor.map(Data_Functor.functorArray)(function (edge) {
                  var $54 = Data_Set.member(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "right";
                  }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "pitch";
                  }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                      return "id";
                  }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                      return "left";
                  }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "pitch";
                  }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                      return "id";
                  }))(Data_Ord.ordString))))))(edge)(explainedEdges.rs);
                  if ($54) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just({
                      edge: edge,
                      stat: ESNotUsed.value
                  });
              })(Model.transEdges(v1.childr.trans));
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                  var $58 = {};
                  for (var $59 in st) {
                      if ({}.hasOwnProperty.call(st, $59)) {
                          $58[$59] = st[$59];
                      };
                  };
                  $58.edges = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (mp) {
                      return function (v3) {
                          return Data_Map_Internal.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                              return "right";
                          }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                              return "pitch";
                          }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                              return "id";
                          }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                              return "left";
                          }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                              return "pitch";
                          }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                              return "id";
                          }))(Data_Ord.ordString))))))(v3.edge)(v3.stat)(mp);
                      };
                  })(st.edges)(Data_Array.catMaybes(Data_Semigroup.append(Data_Semigroup.semigroupArray)(leftChildren)(rightChildren)));
                  return $58;
              }))(function () {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Functor.map(Data_List_Types.functorList)(Folding.nothingMore)(new Data_List_Types.Cons(v1.childl, new Data_List_Types.Cons(Model.attachSegment(v1.childr)(v.seg.rslice), Data_List_Types.Nil.value))));
              });
          };
      };
      var splitRight = function (v) {
          return splitLeft;
      };
      var init = function (start) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Unit.unit);
      };
      var hori = function (v) {
          return function (v1) {
              return function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(validateSlice(v.seg.rslice)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Applicative.when(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(!Data_Array.all(Model.isRepeatingEdge)(v2.childm.trans.edges.regular))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                          var $67 = {};
                          for (var $68 in st) {
                              if ({}.hasOwnProperty.call(st, $68)) {
                                  $67[$68] = st[$68];
                              };
                          };
                          $67.slices = Data_Map_Internal.insert(Model.ordSliceId)(v.seg.rslice.id)(SSInvalidReduction.value)(st.slices);
                          return $67;
                      })))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Foldable.for_(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Foldable.foldableArray)(v2.childm.trans.edges.regular)(function (edge) {
                              return Control_Applicative.when(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(!Model.isRepeatingEdge(edge))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (st) {
                                  var $70 = {};
                                  for (var $71 in st) {
                                      if ({}.hasOwnProperty.call(st, $71)) {
                                          $70[$71] = st[$71];
                                      };
                                  };
                                  $70.edges = Data_Map_Internal.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                                      return "right";
                                  }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                                      return "pitch";
                                  }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                                      return "id";
                                  }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                                      return "left";
                                  }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                                      return "pitch";
                                  }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                                      return "id";
                                  }))(Data_Ord.ordString))))))(edge)(ESNotRepetition.value)(st.edges);
                                  return $70;
                              }));
                          }))(function () {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Functor.map(Data_List_Types.functorList)(Folding.nothingMore)(new Data_List_Types.Cons(v2.childl, new Data_List_Types.Cons(v2.childm, new Data_List_Types.Cons(Model.attachSegment(v2.childr)(v1.seg.rslice), Data_List_Types.Nil.value)))));
                          });
                      });
                  });
              };
          };
      };
      var freezeLeft = function (v) {
          return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(validateSlice(v.seg.rslice));
      };
      return {
          init: init,
          freezeLeft: freezeLeft,
          freezeOnly: freezeLeft,
          splitLeft: splitLeft,
          splitOnly: splitLeft,
          splitRight: splitRight,
          hori: hori
      };
  })();
  var validateReduction = function (red) {
      var emptyVal = {
          notes: Data_Map_Internal.empty,
          edges: Data_Map_Internal.empty,
          slices: Data_Map_Internal.empty
      };
      var agenda = Data_Functor.map(Data_List_Types.functorList)(Folding.nothingMore)(red.segments);
      return Data_Function.flip(Control_Monad_State.execState)(emptyVal)(Folding.walkGraph(validationAlg)(red.start)(agenda));
  }; 
  var eqSliceError = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  exports["NSNoExpl"] = NSNoExpl;
  exports["NSInvalidExplanation"] = NSInvalidExplanation;
  exports["ESNotUsed"] = ESNotUsed;
  exports["ESNotStepwise"] = ESNotStepwise;
  exports["ESNotRepetition"] = ESNotRepetition;
  exports["SSInvalidReduction"] = SSInvalidReduction;
  exports["validateReduction"] = validateReduction;
  exports["eqSliceError"] = eqSliceError;
})(PS);
(function(exports) {
  "use strict";

  exports.ctrlKey = function (e) {
    return e.ctrlKey;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  exports["ctrlKey"] = $foreign.ctrlKey;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Render"] = $PS["Render"] || {};
  var exports = $PS["Render"];
  var CommonApp = $PS["CommonApp"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Pitches_Class = $PS["Data.Pitches.Class"];
  var Data_Pitches_Spelled = $PS["Data.Pitches.Spelled"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Svg_Attributes = $PS["Halogen.Svg.Attributes"];
  var Halogen_Svg_Elements = $PS["Halogen.Svg.Elements"];
  var Model = $PS["Model"];
  var Validation = $PS["Validation"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];                
  var NotSelected = (function () {
      function NotSelected() {

      };
      NotSelected.value = new NotSelected();
      return NotSelected;
  })();
  var Selected = (function () {
      function Selected() {

      };
      Selected.value = new Selected();
      return Selected;
  })();
  var Related = (function () {
      function Related() {

      };
      Related.value = new Related();
      return Related;
  })();
  var white = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(255, 255, 255));
  var warnColor = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(255, 165, 0));
  var selColor$prime = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(135, 206, 250));
  var selColor = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(30, 144, 255));
  var scaley = function (y) {
      return y * 60.0;
  };
  var scalex = function (x) {
      return x * 60.0;
  };
  var renderTime = function (i) {
      return function (v) {
          if (Data_Eq.eq(Data_Ratio.eqRatio(Data_Eq.eqInt))(v.time.s)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(0)(1))) {
              return Halogen_Svg_Elements.text([ Halogen_Svg_Attributes.x(scalex(Data_Int.toNumber(i + 1 | 0))), Halogen_Svg_Attributes.y(scaley(-0.5)), Halogen_Svg_Attributes.text_anchor(Halogen_Svg_Attributes.AnchorMiddle.value), Halogen_Svg_Attributes.dominant_baseline(Halogen_Svg_Attributes.BaselineMiddle.value) ])([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(v.time.m) + ("." + Data_Show.show(Data_Show.showInt)(v.time.b))) ]);
          };
          if (Data_Boolean.otherwise) {
              return Halogen_HTML_Core.text("");
          };
          throw new Error("Failed pattern match at Render (line 296, column 1 - line 296, column 78): " + [ i.constructor.name, v.constructor.name ]);
      };
  };
  var parentColor = selColor$prime;
  var offset = function (i) {
      return Data_Int.toNumber(i) * 20.0;
  };
  var mkOption = function (updateAction) {
      return function (v) {
          return Halogen_HTML_Elements.option([ Halogen_HTML_Properties.value(v.v), Halogen_HTML_Properties.selected(v.s), Halogen_HTML_Events.onClick(function (v2) {
              return updateAction(v.k);
          }) ])([ Halogen_HTML_Core.text(v.v) ]);
      };
  };
  var mkSelect = function (dictShow) {
      return function (dictEq) {
          return function (updateAction) {
              return function (orn) {
                  return function (opts) {
                      var options = Data_Functor.map(Data_Functor.functorArray)(mkOption(updateAction))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ {
                          k: Data_Maybe.Nothing.value,
                          v: "Nothing",
                          s: false
                      } ])(Data_Functor.map(Data_Functor.functorArray)(function (o) {
                          return {
                              k: new Data_Maybe.Just(o),
                              v: Data_Show.show(dictShow)(o),
                              s: Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(new Data_Maybe.Just(o))(orn)
                          };
                      })(opts)));
                      return Halogen_HTML_Elements.select_(options);
                  };
              };
          };
      };
  };
  var lightgray = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(211, 211, 211));
  var gridDiv = function (classes) {
      return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(classes) ]);
  };
  var findPitchIndex = function (v) {
      return function (v1) {
          if (v instanceof Model.Inner && v1 instanceof Model.Inner) {
              return Data_Maybe.fromMaybe(0)(Data_Array.findIndex(function (n) {
                  return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                      return "pitch";
                  }))(Data_Pitches_Class.eqPitch(Data_Pitches_Spelled.eqSInterval)))()(new Data_Symbol.IsSymbol(function () {
                      return "id";
                  }))(Data_Eq.eqString)))(n.note)(v.value0);
              })(v1.value0));
          };
          return 0;
      };
  };
  var errColor = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(255, 0, 0));
  var eqSelectionStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof NotSelected && y instanceof NotSelected) {
              return true;
          };
          if (x instanceof Selected && y instanceof Selected) {
              return true;
          };
          if (x instanceof Related && y instanceof Related) {
              return true;
          };
          return false;
      };
  });                                        
  var doubleOrnaments = [ Model.FullNeighbor.value, Model.FullRepeat.value, Model.LeftRepeatOfRight.value, Model.RightRepeatOfLeft.value, Model.PassingMid.value, Model.PassingLeft.value, Model.PassingRight.value ];
  var renderNoteExplanation = function (graph) {
      return function (sel) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.style("height:30px;"), Halogen_HTML_Properties.class_("pure-g") ])((function () {
              if (sel instanceof CommonApp.SelNote) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text(Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(sel.value0.note.pitch) + (" (" + (sel.value0.note.id + ") "))) ]) ])((function () {
                      if (sel.value0.expl instanceof Model.NoExpl) {
                          return [ gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("no parents") ]) ];
                      };
                      if (sel.value0.expl instanceof Model.RootExpl) {
                          return [ gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("root note") ]) ];
                      };
                      if (sel.value0.expl instanceof Model.HoriExpl) {
                          return [ gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("parent: " + (Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(sel.value0.expl.value0.pitch) + (" (" + (sel.value0.expl.value0.id + ")")))), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                              return CommonApp.removeParent(sel.value0.note)(sel.value0.expl)(Model.setHoriExplParent);
                          }) ])([ Halogen_HTML_Core.text("x") ]) ]) ];
                      };
                      if (sel.value0.expl instanceof Model.LeftExpl) {
                          return [ gridDiv("pure-u-1-4")([  ]), gridDiv("pure-u-1-4")([ mkSelect(Model.showLeftOrnament)(Model.eqLeftOrnament)(function (orn$prime) {
                              return new CommonApp.SetNoteExplanation({
                                  noteId: sel.value0.note.id,
                                  expl: new Model.LeftExpl({
                                      orn: orn$prime,
                                      rightParent: sel.value0.expl.value0.rightParent
                                  })
                              });
                          })(sel.value0.expl.value0.orn)([ Model.LeftRepeat.value, Model.LeftNeighbor.value ]) ]), gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("right parent: " + (Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(sel.value0.expl.value0.rightParent.pitch) + (" (" + (sel.value0.expl.value0.rightParent.id + ")")))), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                              return CommonApp.removeParent(sel.value0.note)(sel.value0.expl)(Model.setRightExplParent);
                          }) ])([ Halogen_HTML_Core.text("x") ]) ]) ];
                      };
                      if (sel.value0.expl instanceof Model.RightExpl) {
                          return [ gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("left parent: " + (Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(sel.value0.expl.value0.leftParent.pitch) + (" (" + (sel.value0.expl.value0.leftParent.id + ")")))), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                              return CommonApp.removeParent(sel.value0.note)(sel.value0.expl)(Model.setLeftExplParent);
                          }) ])([ Halogen_HTML_Core.text("x") ]) ]), gridDiv("pure-u-1-4")([ mkSelect(Model.showRightOrnament)(Model.eqRightOrnament)(function (orn$prime) {
                              return new CommonApp.SetNoteExplanation({
                                  noteId: sel.value0.note.id,
                                  expl: new Model.RightExpl({
                                      orn: orn$prime,
                                      leftParent: sel.value0.expl.value0.leftParent
                                  })
                              });
                          })(sel.value0.expl.value0.orn)([ Model.RightRepeat.value, Model.RightNeighbor.value ]) ]) ];
                      };
                      if (sel.value0.expl instanceof Model.DoubleExpl) {
                          return [ gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("left parent: " + (Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(sel.value0.expl.value0.leftParent.pitch) + (" (" + (sel.value0.expl.value0.leftParent.id + ")")))), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                              return CommonApp.removeParent(sel.value0.note)(sel.value0.expl)(Model.setLeftExplParent);
                          }) ])([ Halogen_HTML_Core.text("x") ]) ]), gridDiv("pure-u-1-4")([ mkSelect(Model.showDoubleOrnament)(Model.eqDoubleOrnament)(function (orn$prime) {
                              return new CommonApp.SetNoteExplanation({
                                  noteId: sel.value0.note.id,
                                  expl: new Model.DoubleExpl({
                                      orn: orn$prime,
                                      leftParent: sel.value0.expl.value0.leftParent,
                                      rightParent: sel.value0.expl.value0.rightParent
                                  })
                              });
                          })(sel.value0.expl.value0.orn)(doubleOrnaments) ]), gridDiv("pure-u-1-4")([ Halogen_HTML_Core.text("right parent: " + (Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(sel.value0.expl.value0.rightParent.pitch) + (" (" + (sel.value0.expl.value0.rightParent.id + ")")))), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                              return CommonApp.removeParent(sel.value0.note)(sel.value0.expl)(Model.setRightExplParent);
                          }) ])([ Halogen_HTML_Core.text("x") ]) ]) ];
                      };
                      throw new Error("Failed pattern match at Render (line 367, column 12 - line 417, column 16): " + [ sel.value0.expl.constructor.name ]);
                  })());
              };
              return [ gridDiv("pure-u-1")([ Halogen_HTML_Core.text("No note selected.") ]) ];
          })());
      };
  };
  var cursor = Halogen_Svg_Attributes.attr("cursor");
  var black = Data_Maybe.Just.create(new Halogen_Svg_Attributes.RGB(0, 0, 0));
  var renderHori = function (selection) {
      return function (slices) {
          return function (v) {
              var explToHori = function (note) {
                  if (note.expl instanceof Model.HoriExpl) {
                      return new Data_Maybe.Just({
                          childNote: note.note,
                          parentNote: note.expl.value0
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.fromMaybe(Halogen_HTML_Core.text(""))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Model.ordSliceId)(v.child)(slices))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Model.ordSliceId)(v.parent)(slices))(function (v2) {
                      var mkedge = function (v3) {
                          var offp = findPitchIndex(new Model.Inner(v3.parentNote))(v2.slice.notes);
                          var offc = findPitchIndex(new Model.Inner(v3.childNote))(v1.slice.notes);
                          var edgeSelected = CommonApp.noteIsSelected(selection)(new Model.Inner(v3.parentNote)) || CommonApp.noteIsSelected(selection)(new Model.Inner(v3.childNote));
                          return Halogen_Svg_Elements.line([ Halogen_Svg_Attributes.x1(scalex(v2.slice.x)), Halogen_Svg_Attributes.y1(scaley(v2.depth) + offset(offp)), Halogen_Svg_Attributes.x2(scalex(v1.slice.x)), Halogen_Svg_Attributes.y2(scaley(v1.depth) + offset(offc)), Halogen_Svg_Attributes.stroke((function () {
                              if (edgeSelected) {
                                  return selColor;
                              };
                              return black;
                          })()), Halogen_Svg_Attributes.strokeWidth(1.0) ]);
                      };
                      var edges = Data_Functor.map(Data_Functor.functorArray)(mkedge)(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(explToHori)(Model.getInnerNotes(v1.slice))));
                      var bar = [ Halogen_Svg_Elements.line([ Halogen_Svg_Attributes.x1(scalex(v2.slice.x)), Halogen_Svg_Attributes.y1(scaley(v2.depth)), Halogen_Svg_Attributes.x2(scalex(v1.slice.x)), Halogen_Svg_Attributes.y2(scaley(v1.depth)), Halogen_Svg_Attributes.stroke(lightgray), Halogen_Svg_Attributes.strokeWidth(3.0), Halogen_Svg_Attributes.attr("stroke-dasharray")("10,5") ]) ];
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Halogen_Svg_Elements.g([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(bar)(edges)));
                  });
              }));
          };
      };
  };
  var renderSlice = function (selection) {
      return function (validation) {
          return function (v) {
              var sliceInvalid = Data_Eq.eq(Data_Maybe.eqMaybe(Validation.eqSliceError))(Data_Map_Internal.lookup(Model.ordSliceId)(v.slice.id)(validation.slices))(new Data_Maybe.Just(Validation.SSInvalidReduction.value));
              var selected = Data_Eq.eq(CommonApp.eqOuterSelection)(selection)(new CommonApp.SelSlice(v.slice.id));
              var selectionAttr = [ cursor("pointer"), Halogen_HTML_Events.onClick(function (ev) {
                  var $84 = Web_UIEvent_MouseEvent.ctrlKey(ev);
                  if ($84) {
                      return CommonApp.NoOp.value;
                  };
                  return new CommonApp.Select((function () {
                      if (selected) {
                          return CommonApp.SelNone.value;
                      };
                      return new CommonApp.SelSlice(v.slice.id);
                  })());
              }) ];
              var selectable = v.depth === 0.0;
              var mknode = function (text) {
                  return function (xcoord) {
                      return function (ycoord) {
                          return function (selStatus) {
                              return function (valid) {
                                  return function (attr) {
                                      var label = Halogen_Svg_Elements.text([ Halogen_Svg_Attributes.x(xcoord), Halogen_Svg_Attributes.y(ycoord), Halogen_Svg_Attributes.text_anchor(Halogen_Svg_Attributes.AnchorMiddle.value), Halogen_Svg_Attributes.dominant_baseline(Halogen_Svg_Attributes.BaselineMiddle.value), Halogen_Svg_Attributes.fill((function () {
                                          if (valid instanceof Data_Maybe.Nothing) {
                                              var $87 = Data_Eq.eq(eqSelectionStatus)(selStatus)(Related.value);
                                              if ($87) {
                                                  return white;
                                              };
                                              return lightgray;
                                          };
                                          if (valid instanceof Data_Maybe.Just && valid.value0 instanceof Validation.NSNoExpl) {
                                              if (selStatus instanceof Selected) {
                                                  return white;
                                              };
                                              return black;
                                          };
                                          if (valid instanceof Data_Maybe.Just && valid.value0 instanceof Validation.NSInvalidExplanation) {
                                              return warnColor;
                                          };
                                          throw new Error("Failed pattern match at Render (line 141, column 19 - line 146, column 51): " + [ valid.constructor.name ]);
                                      })()) ])(text);
                                      var bg = Halogen_Svg_Elements.rect([ Halogen_Svg_Attributes.x(xcoord - scalex(0.24)), Halogen_Svg_Attributes.y(ycoord - 0.5 * offset(1)), Halogen_Svg_Attributes.width(scalex(0.48)), Halogen_Svg_Attributes.height(offset(1)), Halogen_Svg_Attributes.fill((function () {
                                          if (selStatus instanceof NotSelected) {
                                              return white;
                                          };
                                          if (selStatus instanceof Selected) {
                                              return selColor;
                                          };
                                          if (selStatus instanceof Related) {
                                              return selColor$prime;
                                          };
                                          throw new Error("Failed pattern match at Render (line 129, column 15 - line 132, column 37): " + [ selStatus.constructor.name ]);
                                      })()) ]);
                                      return Halogen_Svg_Elements.g(attr)([ bg, label ]);
                                  };
                              };
                          };
                      };
                  };
              };
              var activeParent = (function () {
                  if (selection instanceof CommonApp.SelNote) {
                      return Data_Array.elem(Model.eqSliceId)(v.slice.id)(Model.getParents(selection.value0.parents));
                  };
                  return false;
              })();
              var mknote = function (i) {
                  return function (v1) {
                      var nselectedParent = (function () {
                          if (selection instanceof CommonApp.SelNote) {
                              return Model.explHasParent(v1.note.id)(selection.value0.expl);
                          };
                          return false;
                      })();
                      var nselected = CommonApp.noteIsSelected(selection)(new Model.Inner(v1.note));
                      var nselectable = v.depth !== 0.0;
                      var nodeselected = (function () {
                          if (nselected) {
                              return Selected.value;
                          };
                          if (nselectedParent) {
                              return Related.value;
                          };
                          return NotSelected.value;
                      })();
                      var label = [ Halogen_HTML_Core.text(Data_Show.show(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval))(v1.note.pitch)), Halogen_Svg_Elements.title([  ])([ Halogen_HTML_Core.text(v1.note.id) ]) ];
                      var clickable = nselectable || activeParent;
                      var attrsSel = [ cursor("pointer"), Halogen_HTML_Events.onClick(function (ev) {
                          var $102 = Web_UIEvent_MouseEvent.ctrlKey(ev);
                          if ($102) {
                              if (activeParent) {
                                  return CommonApp.addParentToNote(selection)(v.slice.id)(v1.note);
                              };
                              return CommonApp.NoOp.value;
                          };
                          if (nselectable) {
                              return new CommonApp.Select((function () {
                                  if (nselected) {
                                      return CommonApp.SelNone.value;
                                  };
                                  return new CommonApp.SelNote({
                                      note: v1.note,
                                      expl: v1.expl,
                                      parents: v.slice.parents
                                  });
                              })());
                          };
                          return CommonApp.NoOp.value;
                      }) ];
                      return mknode(label)(scalex(v.slice.x))(scaley(v.depth) + offset(i))(nodeselected)(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.note.id)(validation.notes))((function () {
                          if (clickable) {
                              return attrsSel;
                          };
                          return [  ];
                      })());
                  };
              };
              if (v.slice.notes instanceof Model.Inner) {
                  return Halogen_Svg_Elements.g((function () {
                      if (selectable) {
                          return selectionAttr;
                      };
                      return [  ];
                  })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_Svg_Elements.rect([ Halogen_Svg_Attributes.x(scalex(v.slice.x) - scalex(0.24)), Halogen_Svg_Attributes.y(scaley(v.depth) - scaley(0.24)), Halogen_Svg_Attributes.width(scalex(0.48)), Halogen_Svg_Attributes.height(offset(Data_Array.length(v.slice.notes.value0) - 1 | 0) + scaley(0.48)), Halogen_Svg_Attributes.fill(white), Halogen_Svg_Attributes.stroke((function () {
                      if (selected) {
                          return selColor;
                      };
                      if (activeParent) {
                          return parentColor;
                      };
                      if (sliceInvalid) {
                          return errColor;
                      };
                      return white;
                  })()) ]) ])(Data_Array.mapWithIndex(mknote)(v.slice.notes.value0)));
              };
              return mknode([ Halogen_HTML_Core.text(Data_Show.show(Model.showStartStop(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "expl";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "note";
              }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "id";
              }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "pitch";
              }))(Data_Show.showRecordFieldsNil)(Data_Pitches_Class.showPitchInst(Data_Pitches_Spelled.showpitchSInterval)))(Data_Show.showString))))(Model.showNoteExplanation)))))(v.slice.notes)) ])(scalex(v.slice.x))(scaley(v.depth))((function () {
                  if (activeParent) {
                      return Related.value;
                  };
                  return NotSelected.value;
              })())(Data_Maybe.Nothing.value)([  ]);
          };
      };
  };
  var renderTrans = function (selection) {
      return function (validation) {
          return function (slices) {
              return function (v) {
                  var transSelected = Data_Eq.eq(CommonApp.eqOuterSelection)(selection)(new CommonApp.SelTrans(v.id));
                  var selectionAttr = [ cursor("pointer"), Halogen_HTML_Events.onClick(function (v1) {
                      return new CommonApp.Select((function () {
                          if (transSelected) {
                              return CommonApp.SelNone.value;
                          };
                          return new CommonApp.SelTrans(v.id);
                      })());
                  }) ];
                  return Data_Maybe.fromMaybe(Halogen_HTML_Core.text(""))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Model.ordSliceId)(v.left)(slices))(function (v1) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Model.ordSliceId)(v.right)(slices))(function (v2) {
                          var selectable = v1.depth === 0.0 && v2.depth === 0.0;
                          var mkedge = function (isPassing) {
                              return function (v3) {
                                  var offr = findPitchIndex(v3.right)(v2.slice.notes);
                                  var offl = findPitchIndex(v3.left)(v1.slice.notes);
                                  var edgeSelected = CommonApp.noteIsSelected(selection)(v3.left) || CommonApp.noteIsSelected(selection)(v3.right);
                                  return Halogen_Svg_Elements.line([ Halogen_Svg_Attributes.x1(scalex(v1.slice.x)), Halogen_Svg_Attributes.y1(scaley(v1.depth) + offset(offl)), Halogen_Svg_Attributes.x2(scalex(v2.slice.x)), Halogen_Svg_Attributes.y2(scaley(v2.depth) + offset(offr)), Halogen_Svg_Attributes.stroke((function () {
                                      if (edgeSelected) {
                                          return selColor;
                                      };
                                      var v4 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                                          return "right";
                                      }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                                          return "pitch";
                                      }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                                          return "id";
                                      }))(Data_Ord.ordString)))))()(new Data_Symbol.IsSymbol(function () {
                                          return "left";
                                      }))(Model.ordStartStop(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                                          return "pitch";
                                      }))(Data_Pitches_Class.ordPitch(Data_Pitches_Spelled.ordSInterval)))()(new Data_Symbol.IsSymbol(function () {
                                          return "id";
                                      }))(Data_Ord.ordString))))))(v3)(validation.edges);
                                      if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof Validation.ESNotUsed) {
                                          return warnColor;
                                      };
                                      if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof Validation.ESNotStepwise) {
                                          return errColor;
                                      };
                                      if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof Validation.ESNotRepetition) {
                                          return errColor;
                                      };
                                      return black;
                                  })()), Halogen_Svg_Attributes.strokeWidth(1.0), Halogen_Svg_Attributes.attr("stroke-dasharray")((function () {
                                      if (isPassing) {
                                          return "6,3";
                                      };
                                      return "";
                                  })()) ]);
                              };
                          };
                          var edgeLines = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(mkedge(false))(v.edges.regular))(Data_Functor.map(Data_Functor.functorArray)(mkedge(true))(v.edges.passing));
                          var bar = [ Halogen_Svg_Elements.line(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_Svg_Attributes.x1(scalex(v1.slice.x)), Halogen_Svg_Attributes.y1(scaley(v1.depth)), Halogen_Svg_Attributes.x2(scalex(v2.slice.x)), Halogen_Svg_Attributes.y2(scaley(v2.depth)), Halogen_Svg_Attributes.stroke((function () {
                              if (transSelected) {
                                  return selColor;
                              };
                              return lightgray;
                          })()), Halogen_Svg_Attributes.strokeWidth(15.0) ])((function () {
                              if (selectable) {
                                  return selectionAttr;
                              };
                              return [  ];
                          })())) ];
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Halogen_Svg_Elements.g([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(bar)(edgeLines)));
                      });
                  }));
              };
          };
      };
  };
  var renderReduction = function (piece) {
      return function (graph) {
          return function (validation) {
              return function (selection) {
                  var width = scalex(graph.maxx + 2.0);
                  var svgTranss = Data_Functor.map(Data_Functor.functorArray)(renderTrans(selection)(validation)(graph.slices))(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(graph.transitions)));
                  var svgSlices = Data_Functor.map(Data_Functor.functorArray)(renderSlice(selection)(validation))(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(graph.slices)));
                  var svgHoris = Data_Functor.map(Data_Functor.functorArray)(renderHori(selection)(graph.slices))(Data_Array.fromFoldable(Data_List_Types.foldableList)(graph.horis));
                  var svgAxis = Data_Array.mapWithIndex(renderTime)(piece);
                  var height = scaley(graph.maxd + 4.0);
                  return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.style("overflow-x: scroll;") ])([ Halogen_Svg_Elements.svg([ Halogen_Svg_Attributes.width(width), Halogen_Svg_Attributes.height(height), Halogen_Svg_Attributes.viewBox(-scalex(1.0))(-scaley(1.0))(width)(height) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(svgTranss)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(svgHoris)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(svgSlices)(svgAxis)))) ]);
              };
          };
      };
  };
  exports["renderReduction"] = renderReduction;
  exports["renderNoteExplanation"] = renderNoteExplanation;
})(PS);
(function(exports) {
  "use strict";

  exports.examplePieceJSON = [
      {time: "0,4,3/4", notes: [{ pitch: "D5", hold: false }]},
      {time: "1,1,0", notes: [
          { pitch: "D5", hold: false },
          { pitch: "D3", hold: true },
      ]},
    {time: "1,1,1/4", notes: [
      { pitch: "A4", hold: false },
      { pitch: "D3", hold: true },
    ]},
  ];

  exports.examplePieceJSONLong = [
      {time: "0,4,3/4", notes: [{ pitch: "D5", hold: false }]},
      {time: "1,1,0", notes: [
          { pitch: "D5", hold: false },
          { pitch: "D3", hold: true },
      ]},
    {time: "1,1,1/4", notes: [
      { pitch: "A4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,1,1/2", notes: [
      { pitch: "Bb4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,1,3/4", notes: [
      { pitch: "G4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,2,0", notes: [
      { pitch: "A4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,2,1/4", notes: [
      { pitch: "F4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,2,1/2", notes: [
      { pitch: "E4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,2,3/4", notes: [
      { pitch: "D4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,3,0", notes: [
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,3,1/4", notes: [
      { pitch: "Bb4", hold: true },
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,3,1/2", notes: [
      { pitch: "E5", hold: false },
      { pitch: "Bb4", hold: true },
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,3,3/4", notes: [
      { pitch: "G5", hold: true },
      { pitch: "Bb4", hold: false },
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,4,0", notes: [
      { pitch: "G5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,4,1/4", notes: [
      { pitch: "G5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,4,1/2", notes: [
      { pitch: "F5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "C#4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "1,4,3/4", notes: [
      { pitch: "E5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "C#4", hold: false },
      { pitch: "D3", hold: true },
    ]},
    {time: "2,1,0", notes: [
      { pitch: "G5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "D4", hold: true },
      { pitch: "D3", hold: true },
    ]},
    {time: "2,1,1/4", notes: [
      { pitch: "F5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "D4", hold: false },
      { pitch: "D3", hold: false },
    ]},
    {time: "2,1,1/2", notes: [
      { pitch: "E5", hold: false },
      { pitch: "A4", hold: true },
      { pitch: "A3", hold: true },
    ]},
    {time: "2,1,3/4", notes: [
      { pitch: "D5", hold: false },
      { pitch: "A4", hold: false },
      { pitch: "A3", hold: false },
    ]},
    {time: "2,2,0", notes: [
      { pitch: "F5", hold: false },
      { pitch: "D4", hold: false },
    ]},
  ];
})(PS["Utils"] = PS["Utils"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Utils"] = $PS["Utils"] || {};
  var exports = $PS["Utils"];
  var $foreign = $PS["Utils"];
  var Common = $PS["Common"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Pitches_Class = $PS["Data.Pitches.Class"];
  var Data_Pitches_Spelled = $PS["Data.Pitches.Spelled"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var pieceFromJSON = function (piece) {
      return Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(piece)(function (slice) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Common.parseMBS(slice.time))(function (time) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(slice.notes)(function (note) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (p) {
                      return {
                          hold: note.hold,
                          note: {
                              pitch: p,
                              id: note.id
                          }
                      };
                  })(Data_Pitches_Class.parseNotation(Data_Pitches_Class.parsenotationPitch(Data_Pitches_Spelled.parsenotationSPitch))(note.pitch));
              }))(function (notes) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                      time: time,
                      notes: notes
                  });
              });
          });
      });
  };
  var addJSONIds = function (piece) {
      var addids = function (s) {
          return Data_Array.mapWithIndex(function (n) {
              return function (note) {
                  return {
                      id: "note" + (Data_Show.show(Data_Show.showInt)(s) + ("." + Data_Show.show(Data_Show.showInt)(n))),
                      pitch: note.pitch,
                      hold: note.hold
                  };
              };
          });
      };
      return Data_Array.mapWithIndex(function (s) {
          return function (slice) {
              return {
                  notes: addids(s)(slice.notes),
                  time: slice.time
              };
          };
      })(piece);
  };
  var examplePieceJSONLongWithIds = addJSONIds($foreign.examplePieceJSONLong);
  var examplePieceLong = Data_Maybe.fromJust()(pieceFromJSON(examplePieceJSONLongWithIds));
  var examplePieceJSONWithIds = addJSONIds($foreign.examplePieceJSON);
  var examplePiece = Data_Maybe.fromJust()(pieceFromJSON(examplePieceJSONWithIds));
  exports["examplePiece"] = examplePiece;
  exports["examplePieceLong"] = examplePieceLong;
})(PS);
(function(exports) {
  "use strict";

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  exports["preventDefault"] = $foreign.preventDefault;
})(PS);
(function(exports) {
  "use strict";

  exports.key = function (e) {
    return e.key;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];
  var toEvent = Unsafe_Coerce.unsafeCoerce;                                 
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["key"] = $foreign.key;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent.EventTypes"] = $PS["Web.UIEvent.KeyboardEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var keyup = "keyup";
  exports["keyup"] = keyup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var CommonApp = $PS["CommonApp"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Folding = $PS["Folding"];
  var Halogen_Aff_Util = $PS["Halogen.Aff.Util"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_Event = $PS["Halogen.Query.Event"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_VDom_Driver = $PS["Halogen.VDom.Driver"];
  var Model = $PS["Model"];
  var Render = $PS["Render"];
  var Utils = $PS["Utils"];
  var Validation = $PS["Validation"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_UIEvent_KeyboardEvent_EventTypes = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];                
  var tryModelAction = function (dictMonadState) {
      return function (dictMonadEffect) {
          return function (selector) {
              return function (action) {
                  return function (clearSel) {
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Control_Monad_State_Class.get(dictMonadState))(function (st) {
                          var modelAndSel = Control_Bind.bind(Data_Maybe.bindMaybe)(selector(st.selected))(function (sel) {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)(st.model)(function (model) {
                                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                                      sel: sel,
                                      model: model
                                  });
                              });
                          });
                          if (modelAndSel instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                          };
                          if (modelAndSel instanceof Data_Maybe.Just) {
                              var v = action(modelAndSel.value0.sel)(modelAndSel.value0.model);
                              if (v instanceof Data_Either.Left) {
                                  return Effect_Class_Console.log(dictMonadEffect)(v.value0);
                              };
                              if (v instanceof Data_Either.Right) {
                                  return Control_Monad_State_Class.put(dictMonadState)((function () {
                                      var $29 = {};
                                      for (var $30 in st) {
                                          if ({}.hasOwnProperty.call(st, $30)) {
                                              $29[$30] = st[$30];
                                          };
                                      };
                                      $29.model = new Data_Maybe.Just(v.value0);
                                      $29.selected = (function () {
                                          if (clearSel) {
                                              return CommonApp.SelNone.value;
                                          };
                                          return st.selected;
                                      })();
                                      return $29;
                                  })());
                              };
                              throw new Error("Failed pattern match at Main (line 62, column 28 - line 64, column 111): " + [ v.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Main (line 60, column 3 - line 64, column 111): " + [ modelAndSel.constructor.name ]);
                      });
                  };
              };
          };
      };
  };
  var removeAny = function (dictMonadEffect) {
      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (st) {
          if (st.selected instanceof CommonApp.SelTrans) {
              return handleAction(dictMonadEffect)(CommonApp.UnMergeAtSelected.value);
          };
          if (st.selected instanceof CommonApp.SelSlice) {
              return handleAction(dictMonadEffect)(CommonApp.UnVertAtSelected.value);
          };
          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
      });
  };
  var handleAction = function (dictMonadEffect) {
      var updateSelection = function (v) {
          return function (sel) {
              var v1 = function (v2) {
                  if (Data_Boolean.otherwise) {
                      return sel;
                  };
                  throw new Error("Failed pattern match at Main (line 74, column 1 - line 74, column 88): " + [ v.constructor.name, sel.constructor.name ]);
              };
              if (sel instanceof CommonApp.SelNote) {
                  var $46 = sel.value0.note.id === v.noteId;
                  if ($46) {
                      return CommonApp.SelNote.create({
                          note: sel.value0.note,
                          expl: v.expl,
                          parents: sel.value0.parents
                      });
                  };
                  return v1(true);
              };
              return v1(true);
          };
      };
      var pr = function (ev) {
          return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_Event_Event.preventDefault(Web_UIEvent_KeyboardEvent.toEvent(ev)));
      };
      return function (v) {
          if (v instanceof CommonApp.NoOp) {
              return Effect_Class_Console.log(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))("NoOp");
          };
          if (v instanceof CommonApp.Init) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window)))(function (doc) {
                  return Halogen_Query_HalogenM["subscribe'"](function (sid) {
                      return Halogen_Query_Event.eventListener(Web_UIEvent_KeyboardEvent_EventTypes.keyup)(Web_HTML_HTMLDocument.toEventTarget(doc))((function () {
                          var $73 = Data_Functor.map(Data_Maybe.functorMaybe)(CommonApp.HandleKey.create);
                          return function ($74) {
                              return $73(Web_UIEvent_KeyboardEvent.fromEvent($74));
                          };
                      })());
                  });
              });
          };
          if (v instanceof CommonApp.HandleKey) {
              var v1 = Web_UIEvent_KeyboardEvent.key(v.value0);
              if (v1 === "m") {
                  return Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(pr(v.value0))(handleAction(dictMonadEffect)(CommonApp.MergeAtSelected.value));
              };
              if (v1 === "M") {
                  return Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(pr(v.value0))(handleAction(dictMonadEffect)(CommonApp.UnMergeAtSelected.value));
              };
              if (v1 === "v") {
                  return Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(pr(v.value0))(handleAction(dictMonadEffect)(CommonApp.VertAtSelected.value));
              };
              if (v1 === "V") {
                  return Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(pr(v.value0))(handleAction(dictMonadEffect)(CommonApp.UnVertAtSelected.value));
              };
              if (v1 === "Enter") {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(pr(v.value0))(function () {
                      return combineAny(dictMonadEffect);
                  });
              };
              if (v1 === "Backspace") {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(pr(v.value0))(function () {
                      return removeAny(dictMonadEffect);
                  });
              };
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
          };
          if (v instanceof CommonApp.Select) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $53 = {};
                  for (var $54 in st) {
                      if ({}.hasOwnProperty.call(st, $54)) {
                          $53[$54] = st[$54];
                      };
                  };
                  $53.selected = v.value0;
                  return $53;
              });
          };
          if (v instanceof CommonApp.LoadPiece) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $57 = {};
                  for (var $58 in st) {
                      if ({}.hasOwnProperty.call(st, $58)) {
                          $57[$58] = st[$58];
                      };
                  };
                  $57.model = Data_Maybe.Just.create(Model.loadPiece(v.value0));
                  $57.selected = CommonApp.SelNone.value;
                  return $57;
              });
          };
          if (v instanceof CommonApp.MergeAtSelected) {
              return tryModelAction(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(CommonApp.getSelSlice)(Model.mergeAtSlice)(true);
          };
          if (v instanceof CommonApp.VertAtSelected) {
              return tryModelAction(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(CommonApp.getSelTrans)(Model.vertAtMid)(true);
          };
          if (v instanceof CommonApp.UnMergeAtSelected) {
              return tryModelAction(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(CommonApp.getSelTrans)(Model.undoMergeAtTrans)(true);
          };
          if (v instanceof CommonApp.UnVertAtSelected) {
              return tryModelAction(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(CommonApp.getSelSlice)(Model.undoVertAtSlice)(true);
          };
          if (v instanceof CommonApp.CombineAny) {
              return combineAny(dictMonadEffect);
          };
          if (v instanceof CommonApp.RemoveAny) {
              return removeAny(dictMonadEffect);
          };
          if (v instanceof CommonApp.SetNoteExplanation) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(tryModelAction(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Data_Function["const"](new Data_Maybe.Just(v.value0)))(function (v1) {
                  return Model.noteSetExplanation(v1.noteId)(v1.expl);
              })(false))(function () {
                  return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                      var $64 = {};
                      for (var $65 in st) {
                          if ({}.hasOwnProperty.call(st, $65)) {
                              $64[$65] = st[$65];
                          };
                      };
                      $64.selected = updateSelection(v.value0)(st.selected);
                      return $64;
                  });
              });
          };
          throw new Error("Failed pattern match at Main (line 83, column 16 - line 114, column 70): " + [ v.constructor.name ]);
      };
  };
  var combineAny = function (dictMonadEffect) {
      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (st) {
          if (st.selected instanceof CommonApp.SelTrans) {
              return handleAction(dictMonadEffect)(CommonApp.VertAtSelected.value);
          };
          if (st.selected instanceof CommonApp.SelSlice) {
              return handleAction(dictMonadEffect)(CommonApp.MergeAtSelected.value);
          };
          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
      });
  };
  var appComponent = function (dictMonadEffect) {
      var render = function (st) {
          return Halogen_HTML_Elements.div([  ])([ Halogen_HTML_Elements.h1_([ Halogen_HTML_Core.text("Proto-Voice Annotation") ]), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
              return new CommonApp.LoadPiece(Utils.examplePiece);
          }) ])([ Halogen_HTML_Core.text("Load Example") ]), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
              return new CommonApp.LoadPiece(Utils.examplePieceLong);
          }) ])([ Halogen_HTML_Core.text("Load Example (Long)") ]), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
              return CommonApp.CombineAny.value;
          }), Halogen_HTML_Properties.enabled(CommonApp.outerSelected(st.selected)) ])([ Halogen_HTML_Core.text("Combine (Enter)") ]), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
              return CommonApp.RemoveAny.value;
          }), Halogen_HTML_Properties.enabled(CommonApp.outerSelected(st.selected)) ])([ Halogen_HTML_Core.text("Remove (Backspace)") ]), (function () {
              if (st.model instanceof Data_Maybe.Nothing) {
                  return Halogen_HTML_Core.text("");
              };
              if (st.model instanceof Data_Maybe.Just) {
                  var valid = Validation.validateReduction(st.model.value0.reduction);
                  var graph = Folding.evalGraph(st.model.value0.reduction);
                  return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.p_([ Render.renderNoteExplanation(graph)(st.selected) ]), Render.renderReduction(st.model.value0.piece)(graph)(valid)(st.selected) ]);
              };
              throw new Error("Failed pattern match at Main (line 141, column 9 - line 152, column 16): " + [ st.model.constructor.name ]);
          })(), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Selection: "), Halogen_HTML_Core.text(Data_Show.show(CommonApp.showOuterSelection)(st.selected)) ]), Halogen_HTML_Elements.pre_([ Halogen_HTML_Core.text(Data_Maybe.maybe("No Piece Loaded")(function ($75) {
              return Model.showReduction((function (v) {
                  return v.reduction;
              })($75));
          })(st.model)) ]) ]);
      };
      var initialState = function (v) {
          return {
              selected: CommonApp.SelNone.value,
              model: Data_Maybe.Nothing.value
          };
      };
      return Halogen_Component.mkComponent({
          initialState: initialState,
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(dictMonadEffect),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(CommonApp.Init.value),
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitLoad)(function () {
      return Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.selectElement("#app"))(function (elt) {
          return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(elt)(Halogen_VDom_Driver.runUI(appComponent(Effect_Aff.monadEffectAff))(Data_Unit.unit));
      });
  }));
  exports["main"] = main;
  exports["tryModelAction"] = tryModelAction;
  exports["combineAny"] = combineAny;
  exports["removeAny"] = removeAny;
  exports["handleAction"] = handleAction;
  exports["appComponent"] = appComponent;
})(PS);
PS["Main"].main();